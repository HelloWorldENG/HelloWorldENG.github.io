<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xampp和navicat一些随笔</title>
      <link href="/2023/06/30/xampp%E5%8D%87%E7%BA%A7%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/06/30/xampp%E5%8D%87%E7%BA%A7%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="解决navicat连接本地数据库的2013报错"><a href="#解决navicat连接本地数据库的2013报错" class="headerlink" title="解决navicat连接本地数据库的2013报错"></a>解决navicat连接本地数据库的2013报错</h1><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>为了升级我的mysql的版本，所以我选择升级xampp，没想到重装后一直小毛病不断，找了个中午将其彻底解决。</p><p>navicat连接数据库出现2013报错：</p><p><img src="/2023/06/30/xampp%E5%8D%87%E7%BA%A7%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/image-20230630130507042.png" alt="image-20230630130507042"></p><p>现在中文网上搜索，大多数博主讲的都是连接远程数据库时出现的，而我却是连接本地数据库端口出现这个2013报错。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>于是我选择保存mysql下data文件，然后重装xampp。重装后的xampp，navicat可以正常连接了。</p><h1 id="xampp恢复数据"><a href="#xampp恢复数据" class="headerlink" title="xampp恢复数据"></a>xampp恢复数据</h1><ol><li>将新的xampp下mysql的data文件保存副本</li><li>将D:\xampp\mysql\data目录下的数据库文件夹移动到新的安装目录的F:\xampp\mysql\data目录下，每个数据库都对应一个文件夹</li><li>将D:\xampp\mysql\data目录下的ib_logfile0，ib_logfile1，ibdata1三个文件覆盖新的安装文件下的对应文件。</li></ol><p>这时候再次打开navicat发现居然还是报跟上面一样的错。所以问题处在数据库文件下。通过阅读报错，我将问题定位在data下的mysql文件下，将第一步中的新的mysql文件覆盖，完美解决问题。</p><h1 id="xampp关闭时ini文件报错"><a href="#xampp关闭时ini文件报错" class="headerlink" title="xampp关闭时ini文件报错"></a>xampp关闭时ini文件报错</h1><p>找到xampp-control.ini<br>右键 属性–》安全–》编辑–》完全控制<br>在点确定</p><p><strong>注在网上搜索时，有些帖子教你：</strong></p><p>给xampp-control.exe设置管理员权限。<br>在xampp安装路径下找到“xampp-control.exe”，右键该应用程序，在属性对话框选择”兼容性”，勾选上“以管理员身份运行此程序”即可。</p><p>这个只能解决一时的，而且会导致xampp和mysql服务崩溃！亲身经历导致了xampp启动mysql不了，会出现：无法启动、运行一段时间后断开。启动之后也有上面的<a href="#%E8%A7%A3%E5%86%B3navicat%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%842013%E6%8A%A5%E9%94%99">2013报错</a>。非我一人如此，我也是看到一个网友有相同经历才想到。原先还百思不得其解为何好端端的会出现上述错误，一切都说的通。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> xampp </tag>
            
            <tag> navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于node：digital envelope routines::unsupported</title>
      <link href="/2023/06/26/%E5%85%B3%E4%BA%8Enode%EF%BC%9Adigital-envelope-routines-unsupported/"/>
      <url>/2023/06/26/%E5%85%B3%E4%BA%8Enode%EF%BC%9Adigital-envelope-routines-unsupported/</url>
      
        <content type="html"><![CDATA[<h1 id="1-报错"><a href="#1-报错" class="headerlink" title="1.报错"></a>1.报错</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Error: error:<span class="number">0308010</span>C:digital envelope routines::unsupported</span><br><span class="line">    at new Hash (node:internal/crypto/hash:<span class="number">71</span>:<span class="number">19</span>)</span><br><span class="line">    at Object.createHash (node:crypto:<span class="number">133</span>:<span class="number">10</span>)</span><br><span class="line">    at module.exports (D:\<span class="class"><span class="keyword">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">webpack</span>\<span class="title">lib</span>\<span class="title">util</span>\<span class="title">createHash</span>.<span class="title">js</span>:135:53)</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">NormalModule</span>._<span class="title">initBuildHash</span> (<span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">webpack</span>\<span class="title">lib</span>\<span class="title">NormalModule</span>.<span class="title">js</span>:417:16)</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">handleParseError</span> (<span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">webpack</span>\<span class="title">lib</span>\<span class="title">NormalModule</span>.<span class="title">js</span>:471:10)</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">webpack</span>\<span class="title">lib</span>\<span class="title">NormalModule</span>.<span class="title">js</span>:503:5</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">webpack</span>\<span class="title">lib</span>\<span class="title">NormalModule</span>.<span class="title">js</span>:358:12</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">loader</span>-<span class="title">runner</span>\<span class="title">lib</span>\<span class="title">LoaderRunner</span>.<span class="title">js</span>:373:3</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">iterateNormalLoaders</span> (<span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">loader</span>-<span class="title">runner</span>\<span class="title">lib</span>\<span class="title">LoaderRunner</span>.<span class="title">js</span>:214:10)</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">Storage</span>.<span class="title">finished</span> (<span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">enhanced</span>-<span class="title">resolve</span>\<span class="title">lib</span>\<span class="title">CachedInputFileSystem</span>.<span class="title">js</span>:55:16)</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">enhanced</span>-<span class="title">resolve</span>\<span class="title">lib</span>\<span class="title">CachedInputFileSystem</span>.<span class="title">js</span>:91:9</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">D</span>:\<span class="title">class</span>\<span class="title">fish</span>\<span class="title">ruoyi</span>-<span class="title">ui</span>\<span class="title">node_modules</span>\<span class="title">graceful</span>-<span class="title">fs</span>\<span class="title">graceful</span>-<span class="title">fs</span>.<span class="title">js</span>:123:16</span></span><br><span class="line"><span class="class">    <span class="title">at</span> <span class="title">FSReqCallback</span>.<span class="title">readFileAfterClose</span> [<span class="title">as</span> <span class="title">oncomplete</span>] (<span class="title">node</span>:<span class="title">internal</span>/<span class="title">fs</span>/<span class="title">read_file_context</span>:68:3)</span> &#123;</span><br><span class="line">  opensslErrorStack: [ <span class="string">&#x27;error:03000086:digital envelope routines::initialization error&#x27;</span> ],</span><br><span class="line">  library: <span class="string">&#x27;digital envelope routines&#x27;</span>,</span><br><span class="line">  reason: <span class="string">&#x27;unsupported&#x27;</span>,</span><br><span class="line">  code: <span class="string">&#x27;ERR_OSSL_EVP_UNSUPPORTED&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v18.<span class="number">12.1</span></span><br></pre></td></tr></table></figure><h1 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h1><p>因为 node.js V17版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 <a href="https://so.csdn.net/so/search?q=nodejs&spm=1001.2101.3001.7020">nodejs</a> 版本后会报错。</p><h1 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h1><p>1.推荐：修改你要运行项目的package.json，在相关构建命令之前加入SET NODE_OPTIONS&#x3D;–openssl-legacy-provider</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;serve&quot;: &quot;SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve&quot;,</span><br><span class="line">   &quot;build&quot;: &quot;SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这种可以一劳永逸，以后直接通过npm执行scripts里面的命令即可。不管是项目迭代，还是团队开发，这种都比较有效。</p><p>2.当次运行的命令窗口有效：在你当前文件的<a href="https://so.csdn.net/so/search?q=cmd%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020">cmd命令</a>窗口输入：SET NODE_OPTIONS&#x3D;–openssl-legacy-provider， 回车后输入 npm运行命令</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ef156c7b9e0287fdb1ef22883cf9ddf0.png" alt="img"></p><p>这种做法，就是每次运行都要输入SET NODE_OPTIONS&#x3D;–openssl-legacy-provider，来告诉nodejs,别使用最新的SSL3.0,还是使用以前旧版本的。</p><p> 3.就是nodejs版本回退到16版本，这样就可以直接运行了。（这个最适合项目维护）</p><h1 id="4-后话"><a href="#4-后话" class="headerlink" title="4.后话"></a>4.后话</h1><p>关于：SET NODE_OPTIONS&#x3D;–openssl-legacy-provider，其实这种方法不能一劳永逸，它的legacy的中文意思翻译过来是经典的，传统的，对于目前2022年12月4号来说，openssl3.0是最新的，之前的版本属于legacy版本，但是随着时间的推移，</p><p>未来可能在2024年，openssl3.0可能也变成了legacy版本，此时再设置SET NODE_OPTIONS&#x3D;–openssl-legacy-provider，来通知nodejs使用传统的openSSL来执行，那么可能就会运行错误。<strong>那么对于产品的迭代维护来说，最好的话，还是使用旧版本的nodejs,比如16版本的，这个才可能是解决问题的关键。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaEE总结</title>
      <link href="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/"/>
      <url>/2023/06/20/javaEE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Web-服务器和HTTP-协议"><a href="#一-Web-服务器和HTTP-协议" class="headerlink" title="一. Web 服务器和HTTP 协议"></a>一. Web 服务器和HTTP 协议</h1><h2 id="1-Web服务器"><a href="#1-Web服务器" class="headerlink" title="1.Web服务器"></a>1.Web服务器</h2><h3 id="常见的web服务器"><a href="#常见的web服务器" class="headerlink" title="常见的web服务器"></a>常见的web服务器</h3><p>（1）Apache。Apache仍然是世界上⽤的最多的Web服务器，市场占有率达60%左右，可以运⾏在所有的Unix、windows、Linux平台上，使⽤PHP语⾔开发Web⽹站通常需要部署到Apache服务器。 </p><p>(2) IIS。全程为Internet Information Services （IIS），由微软公司开发，也是目前最流⾏的Web服务器产品之 ⼀。IIS提供了⼀个图形界⾯的管理⼯具 ，称为Internet服务，可⽤于监视配置和控制Internet服务，⽀持asp 、sp.net等多种开发语⾔。</p><p>(3) Nginx，发⾳为「engine X」，是⼀个基于异步框架的⾼性能Web服务器，通常⽤作反向代理、负载均衡器和 HTTP缓存。Nginx由俄罗斯程序员伊⼽爾·賽索耶夫 （Игорь Сысоев）于2004开发发布，2019年被F5⽹络公司以 6.7亿美元收购，Nginx在⾼并发下能保持低资源低消耗⾼性能，⽬前是⽹络中应⽤⼴泛的Web服务器之⼀。 </p><p>(4) Apache Tomcat，是⼀个⾯向中⼩型系统的Web服务器，是由Apache软件基⾦会属下Jakarta项⽬ 开发的 Servlet 容器，按照Sun Microsystems 提供的技术规范，实现了对Servlet和JavaServer Page(JSP)的支持。Tomcat往往作为Java Web开发初学者常⽤的服务器</p><h3 id="web服务器工作原理"><a href="#web服务器工作原理" class="headerlink" title="web服务器工作原理"></a>web服务器工作原理</h3><p>Web也称为万维⽹，World Wide Web，是指通过互联⽹访问的，由许多相互链接的HTML⻚⾯组成的⼀个⽹络 系统。Web服务器通常则指提供⽹站服务的⼀种运⾏在后台的应⽤程序。</p><h3 id="web服务器和web应用的关系"><a href="#web服务器和web应用的关系" class="headerlink" title="web服务器和web应用的关系"></a>web服务器和web应用的关系</h3><p>**(from 网络)**Web服务器实现了HTTP协议的服务器，监听端口，接受客户端建立连接的请求，捐接收数据，并把接收到的HTTP请求通过类似CGI，WSGI，Servlet的接口交给应用程序处理，而应用程序处理后的输出交给 Web服务器，由Web服务器通过连接发送给客户端</p><p>**(from pdf)**Web系统通常包含前端和后端两部分：(1)前端由浏览器组成， 负责解析HTML⻚⾯的代码以及运⾏javascript脚本程序，完成⻚⾯渲染；(2)后端则负责处理前端发送的Http请 求，将数据或者⽹⻚及其资源⽂件发回给前端。</p><h2 id="2-tomcat-服务器"><a href="#2-tomcat-服务器" class="headerlink" title="2.tomcat 服务器"></a>2.tomcat 服务器</h2><h3 id="默认端口号8080"><a href="#默认端口号8080" class="headerlink" title="默认端口号8080"></a>默认端口号8080</h3><h3 id="conf-x2F-server-xml修改端口号"><a href="#conf-x2F-server-xml修改端口号" class="headerlink" title="conf&#x2F;server.xml修改端口号"></a>conf&#x2F;server.xml修改端口号</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置tomcat服务器端⼝号,默认为8080 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  客户端可以通过8009端⼝号,使⽤AJP协议访问Tomcat --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /</span></span><br></pre></td></tr></table></figure><h3 id="tomcat服务器项目的部署的两种方式"><a href="#tomcat服务器项目的部署的两种方式" class="headerlink" title="tomcat服务器项目的部署的两种方式"></a>tomcat服务器项目的部署的两种方式</h3><p>1.编译好的项目文件复制到webapps目录下</p><p>2.将项目打包成war压缩文件， 复制到webapps目录</p><h2 id="3-HTTP协议-超文本传输协议"><a href="#3-HTTP协议-超文本传输协议" class="headerlink" title="3.HTTP协议(超文本传输协议)"></a>3.HTTP协议(超文本传输协议)</h2><h3 id="http基于TCP-x2F-IP协议，传输层基于可靠的TCP协议-默认端口号-80"><a href="#http基于TCP-x2F-IP协议，传输层基于可靠的TCP协议-默认端口号-80" class="headerlink" title="http基于TCP&#x2F;IP协议，传输层基于可靠的TCP协议,默认端口号 80"></a>http基于TCP&#x2F;IP协议，传输层基于可靠的TCP协议,默认端口号 80</h3><p>可以⽤来传输HTML⽂件、图⽚⽂件和查询结果等。</p><h3 id="https-默认端口号443"><a href="#https-默认端口号443" class="headerlink" title="https 默认端口号443"></a>https 默认端口号443</h3><h3 id="HTTP、HTML、HTTPS的区别和联系"><a href="#HTTP、HTML、HTTPS的区别和联系" class="headerlink" title="HTTP、HTML、HTTPS的区别和联系"></a>HTTP、HTML、HTTPS的区别和联系</h3><p><strong>HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。</strong></p><p>  为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p><p>  <strong>HTTPS和HTTP的区别主要为以下四点：</strong></p><p>  1.https协议需要到ca申请证书，一般免费证书很少，需要交费。</p><p>  2.http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</p><p>  3.http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>  4.http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络，比http协议安全。</p><p> HTML是页面描述语言</p><h2 id="4-HTTP的报文类型：请求报文-应答-响应-报文"><a href="#4-HTTP的报文类型：请求报文-应答-响应-报文" class="headerlink" title="4.HTTP的报文类型：请求报文 应答(响应)报文"></a>4.HTTP的报文类型：请求报文 应答(响应)报文</h2><h3 id="HTTP报文结构：头部和主体"><a href="#HTTP报文结构：头部和主体" class="headerlink" title="HTTP报文结构：头部和主体"></a>HTTP报文结构：头部和主体</h3><p>HTTP 协议是以 ASCII 码传输，建⽴在 TCP&#x2F;IP 协议之上的应⽤层规范。规范把 HTTP 请求分为三个部分：状态 ⾏、请求头、消息主体。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">method</span>&gt;</span> <span class="tag">&lt;<span class="name">request-URL</span>&gt;</span> <span class="tag">&lt;<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">headers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entity-body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230617161509927.png" alt="image-20230617161509927"></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><h4 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h4><p>HTTP 定义了与服务器交互的不同⽅法，最基本的⽅法有4种，分别是GET，POST，PUT，DELETE。URL全称是 资源描述符，⼀个URL地址，它⽤于描述⼀个⽹络上的资源，对应着对资源的查，增，改，删4个操作。</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230617164938224.png" alt="image-20230617164938224"></p><p>重点关注 GET,POST,PUT,DELETE,HEAD。</p><h4 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h4><p>GET 可提交的数据量受到URL⻓度的限制，HTTP 协议规范没有对 URL ⻓度进⾏限制。这个限制是特定的浏览器及服务器对它的限制。</p><p>理论上讲，POST 是没有⼤⼩限制的，HTTP 协议规范也没有进⾏⼤⼩限制，出于安全考虑，服务器软件在实现时会做⼀定限制。</p><p>GET 和 POST 数据内容是⼀模⼀样的，只是位置不同，⼀个在 URL  ⾥，⼀个在 HTTP 包的包体⾥。</p><h4 id="HTTP-协议中规定-POST-提交的数据必须在-body-部分"><a href="#HTTP-协议中规定-POST-提交的数据必须在-body-部分" class="headerlink" title="HTTP 协议中规定 POST 提交的数据必须在 body 部分"></a>HTTP 协议中规定 POST 提交的数据必须在 body 部分</h4><h4 id="post内容类型Content-type"><a href="#post内容类型Content-type" class="headerlink" title="post内容类型Content-type"></a>post内容类型Content-type</h4><ol><li><p>application&#x2F;x-www-form-urlencoded</p><p>最常⻅的 POST 数据提交⽅式。浏览器的原⽣表单，如果不设置 enctype 属性，那么最终就会以这种⽅式提交数据。body 当中的内容和 GET 请求是完全相同的。</p></li><li><p>multipart&#x2F;form-data</p><p>这⼜是⼀个常⻅的 POST 数据提交的⽅式。我们使⽤表单上传⽂件时，必须让  multipart&#x2F;form-data 。</p></li><li><p><strong>application&#x2F;json</strong></p><p><strong>JSON数据类型，用于传输结构化的数据。</strong></p></li><li><p>text&#x2F;xml</p><p>XML数据类型，用于传输可扩展标记语言（Extensible Markup Language）数据。</p></li><li><p>application&#x2F;x-protobuf</p><p>用于传输Protocol Buffers（简称Protobuf）数据。⼆进制格式</p></li></ol><p><strong>服务器根据 Content-Type 和 Content-Encoding 解析请求</strong></p><h3 id="应答报文"><a href="#应答报文" class="headerlink" title="应答报文"></a>应答报文</h3><p>状态行、响应头(Response Header)、 响应正⽂</p><h4 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h4><ul><li><strong>200 OK 客户端请求成功</strong> </li><li>301 Moved Permanently 请求永久重定向 </li><li>302 Moved Temporarily 请求临时重定向 </li><li><strong>304 Not Modified 文件未修改，可以直接使用缓存的文件。</strong> </li><li>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。 </li><li>401 Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域⼀起使⽤ </li><li><strong>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正⽂中给出不提供服务的原因</strong> </li><li><strong>404 Not Found 请求的资源不存在，例如，输⼊了错误的URL</strong> </li><li><strong>500 Internal Server Error 服务器发⽣不可预期的错误，导致⽆法完成客户端的请求。</strong> </li><li>503 Service Unavailable 服务器当前不能够处理客户端的请求，在⼀段时间之后，服务器可能会恢复正常。</li></ul><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL全称是资源描述符，⼀个URL地址，它⽤于描述⼀个⽹络上的资源</p><h4 id="url字段含义"><a href="#url字段含义" class="headerlink" title="url字段含义"></a>url字段含义</h4><p>示例：<a href="http://www.testjava.com:9000/">http://www.testjava.com:9000/</a> input&#x2F;test?a&#x3D;3&amp;b&#x3D;5….</p><p>在URL（Uniform Resource Locator）中，各个字段的含义如下：</p><ol><li>协议（Protocol）：在这个示例中，协议为HTTP（Hypertext Transfer Protocol），它定义了浏览器和服务器之间进行通信的规则。</li><li>域名（Domain Name）：在这个示例中，域名为”<a href="http://www.testjava.com".它是用于识别和定位网站的字符串,通常由多个部分组成,例如"www"表示主机,"testjava"表示域名的名称,而"com"表示顶级域./">www.testjava.com&quot;。它是用于识别和定位网站的字符串，通常由多个部分组成，例如&quot;www&quot;表示主机，&quot;testjava&quot;表示域名的名称，而&quot;com&quot;表示顶级域。</a></li><li>端口（Port）：在这个示例中，端口号为9000。它用于标识服务器上的特定服务。HTTP协议的默认端口是80，但在这个URL中，使用了非默认的端口号9000。</li><li>路径（Path）：在这个示例中，路径为”&#x2F;input&#x2F;test”。它指定了服务器上资源的具体位置或路径。当浏览器发送请求时，服务器将根据路径来定位所需的资源。</li><li>查询参数（Query Parameters）：在这个示例中，查询参数为”a&#x3D;3&amp;b&#x3D;5”。查询参数用于向服务器传递额外的信息或数据。它们位于URL路径之后，以问号（?）分隔，多个参数之间使用和号（&amp;）分隔。在这个示例中，参数”a”的值为3，参数”b”的值为5。</li></ol><h4 id="url传参"><a href="#url传参" class="headerlink" title="url传参"></a>url传参</h4><p>对于数据的传递，HTTP协议提供了两种常见的方式：</p><ol><li><p>数据放在URL中的查询参数：就像上述示例中的查询参数一样，可以将数据直接放在URL中作为查询参数的一部分。这种方式适用于较小的数据，对于敏感数据或需要保密的数据不太安全。</p></li><li><p>数据放在请求的主体中（Body）：对于较大的数据或需要保密的数据，可以将数据放在请求的主体中。这通常用于HTTP的POST请求。数据可以使用不同的格式，例如表单数据（form data）、JSON数据等。在这种情况下，请求头（Headers）中通常会包含一些描述数据的信息，例如Content-Type来指定主体数据的格式。</p></li></ol><p>需要根据实际情况选择将数据放在URL的查询参数中还是请求主体中，通常取决于数据的大小、安全性需求和服务器端的处理方式。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Maven 是⼀款基于 Java 平台的项⽬管理和整合⼯具，它将项⽬的开发和管理过程抽象成⼀个项⽬对象模型 （POM）。开发⼈员只需要做⼀些简单的配置，Maven 就可以⾃动完成项⽬的编译、测试、打包、发布以及部署 等⼯作。 </p><p>Maven 是使⽤ Java 语⾔编写的，因此它和 Java ⼀样具有跨平台性，这意味着⽆论是在 Windows ，还是在 Linux  或者 Mac OS 上，都可以使⽤相同的命令进⾏操作。</p><p> Maven 使⽤标准的⽬录结构和默认构建⽣命周期，因此开发者⼏乎不⽤花费多少时间就能够⾃动完成项⽬的基础 构建⼯作。</p><p>Maven 能够帮助开发者完成以下任务： </p><ul><li><p>构建项⽬ </p></li><li><p>⽣成⽂档 </p></li><li><p>创建报告 </p></li><li><p>维护依赖 </p></li><li><p>软件配置管理 </p></li><li><p>发布 </p></li><li><p>部署</p></li></ul><p>总⽽⾔之，Maven 简化并标准化了项⽬构建过程。它将项⽬的编译，⽣成⽂档，创建报告，发布，部署等任务⽆ 缝衔接，构建成⼀套完整的⽣命周期。 </p><h4 id="Maven-的⽬标"><a href="#Maven-的⽬标" class="headerlink" title="Maven 的⽬标"></a>Maven 的⽬标</h4><p>Maven 的主要⽬标是为为开发⼈员提供如下内容： </p><ul><li><p>⼀个可重复使⽤，可维护且易于理解的项⽬综合模型 </p></li><li><p>与此模型进⾏交互的⼯具和插件 </p></li><li><p>约定优于配置 </p><p>约定优于配置（Convention Over Configuration）是 Maven 最核⼼的涉及理念之⼀ ，Maven对项⽬的⽬录 结构、测试⽤例命名⽅式等内容都做了规定，凡是使⽤ Maven 管理的项⽬都必须遵守这些规则。 Maven 项⽬构建过程中，会⾃动创建默认项⽬结构，开发⼈员仅需要在相应⽬录结构下放置相应的⽂件即可。</p></li></ul><p>maven的主体框架如下图所示：</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230617215927814.png" alt="image-20230617215927814"></p><h4 id="pom-xml文件的作用"><a href="#pom-xml文件的作用" class="headerlink" title="pom.xml文件的作用"></a>pom.xml文件的作用</h4><p>Maven项目构建和依赖管理的核心文件。</p><p>Maven通过pom.xml文件实现依赖管理，开发者只需要在pom.xml⽂件中给出所需依赖的相应信息，maven会⾃动的从仓库进行依赖下载并完成项目构架。</p><h4 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h4><ol><li><p>本地仓库</p><p>就是你⾃⼰电脑上的仓库，每个⼈电脑上都有⼀个仓库，默认位置在 当前⽤户名 .m2\repository</p></li><li><p>私服仓库</p><p>⼀般来说是公司内部搭建的 Maven 私服，处于局域⽹中，访问速度较快，这个仓库中存放的 jar ⼀般就是公司内部⾃⼰开发的 jar</p></li><li><p>中央仓库</p><p>有 Apache 团队来维护，包含了⼤部分的 jar，早期不包含 Oracle 数据库驱动，从 2019 年 8 ⽉开 始，包含了 Oracle 驱动</p></li></ol><h4 id="maven常用命令"><a href="#maven常用命令" class="headerlink" title="maven常用命令"></a>maven常用命令</h4><ol><li><strong>mvn clean : 清理,清理target下的目标⽂件</strong> </li><li><strong>mvn package : 打包,将源码编译后打包为jar&#x2F;war,到target下</strong>  </li><li><strong>mvn compile: 编译源代码</strong> </li><li><strong>mvn install: 将软件包安装到本地存储库中，用作本地其他项目的依赖项</strong></li><li>mvn clean package : 清理且打包,⼀起运⾏ </li><li>mvn clean package -maven.test.skip&#x3D;true : 清理且打包,同时跳过test测试 </li><li>mvn clean compile package -maven.test.skip&#x3D;true : 清理编译且打包,同时跳过test测试 </li><li>mvn test-compile : 运⾏测试 </li><li>mvn depoly: 部署,将生产的目标文件上传到本地仓库和公司仓库 </li><li>mvn jetty:run : 调⽤ Jetty 插件的 Run ⽬标在 Jetty Servlet 容器中启动 web 应⽤</li></ol><h1 id="二-Servlet-和过滤器"><a href="#二-Servlet-和过滤器" class="headerlink" title="二. Servlet 和过滤器"></a>二. Servlet 和过滤器</h1><h2 id="1-Servlet基础"><a href="#1-Servlet基础" class="headerlink" title="1.Servlet基础"></a>1.Servlet基础</h2><h3 id="1-Servlet-是什么"><a href="#1-Servlet-是什么" class="headerlink" title="1.Servlet 是什么"></a>1.Servlet 是什么</h3><p>Servlet（Server Applet）是Java 程序，具有独立于平台和协议 Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p><h3 id="2-servlet的主要功能"><a href="#2-servlet的主要功能" class="headerlink" title="2.servlet的主要功能"></a>2.servlet的主要功能</h3><ul><li>接收前端⽤户参数</li><li>动态⽣成返回内容</li></ul><p>servlet可以看成是连接用户前端和数据库的桥梁，**&#x3D;&#x3D;用来处理Web请求，需要部署到tomcat上运行&#x3D;&#x3D;**。</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230617230922631.png" alt="image-20230617230922631"></p><h3 id="3-部署运行"><a href="#3-部署运行" class="headerlink" title="3.部署运行"></a>3.部署运行</h3><p>请注意以下几点:</p><ul><li>Servlet类必须继承HttpServlet基类</li><li>Servlet必须映射到一个url地址，否则无法访问</li><li>Servlet需要实现一个处理http请求方法，如doGet(), doPost()等。</li></ul><h3 id="4-代码结构"><a href="#4-代码结构" class="headerlink" title="4.代码结构"></a>4.代码结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"> publicclass HelloServlet <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req,  HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         resp.getWriter().println(<span class="string">&quot;Welecome to study servlet!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>doGet()方法参数：</p><ul><li>HttpServletRequest 用于封装Http请求报文，获取客户端信息</li><li>HttpServletResponse 用于封装Http响应报文，给客户端返回响应</li></ul><h2 id="2-处理Http请求"><a href="#2-处理Http请求" class="headerlink" title="2.处理Http请求"></a>2.处理Http请求</h2><h3 id="1-servlet映射到-url-地址"><a href="#1-servlet映射到-url-地址" class="headerlink" title="1.servlet映射到 url 地址"></a>1.servlet映射到 url 地址</h3><p><strong>使用<code>@WebServlet(&quot;/hello&quot;)</code>注解指定映射路径。</strong></p><p>拓展：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;HelloServlet&quot;, urlPatterns = &quot;/hello&quot;)</span>：</span><br><span class="line"><span class="comment">//指定 Servlet 的名称和 URL 地址模式。</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;HelloServlet&quot;, urlPatterns = &#123;&quot;/hello&quot;, &quot;/greeting&quot;&#125;)</span>：</span><br><span class="line"><span class="comment">//指定多个 URL 地址模式。</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;HelloServlet&quot;, value = &quot;/hello&quot;, initParams = &#123;@WebInitParam(name = &quot;message&quot;, value = &quot;Hello, world!&quot;)&#125;)</span>：</span><br><span class="line"><span class="comment">//指定初始化参数。</span></span><br></pre></td></tr></table></figure><p><u>还可使用web.xml 文件进行映射(仅作了解)</u></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>web.xml</code> 文件中，使用 <code>&lt;servlet&gt;</code> 元素定义 Servlet，并使用 <code>&lt;servlet-name&gt;</code> 元素指定 Servlet 的名称。</li><li>然后，在 <code>&lt;servlet-mapping&gt;</code> 元素中，使用 <code>&lt;servlet-name&gt;</code> 元素指定 Servlet 的名称，并使用 <code>&lt;url-pattern&gt;</code> 元素指定要映射的 URL 地址模式。</li><li>在这个示例中，Servlet 类 <code>com.example.MyServlet</code> 被映射到 URL 地址模式 <code>/myservlet</code>。</li></ul><h3 id="2-获取参数-getParameter"><a href="#2-获取参数-getParameter" class="headerlink" title="2.获取参数-getParameter()"></a>2.获取参数-getParameter()</h3><p>JavaServlet中的HttpServletRequest提供了getParameter()接口用于获取客户端参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><p>该方法的参数name为字符串类型，对应于前端的参数名，<strong>返回结果为String类型</strong>，以字符串形式表示所获取到的参数值。</p><p>例如：要获取url <a href="http://localhost:8089/handle?age=90&name=Liqiang%E4%B8%AD%E7%9A%84age%E5%8F%82%E6%95%B0%EF%BC%8C%E5%88%99%E4%BB%A3%E7%A0%81%E4%B8%BA">http://localhost:8089/handle?age=90&amp;name=Liqiang中的age参数，则代码为</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">ageStr</span>  <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr); </span><br></pre></td></tr></table></figure><p>字符串类型转换为其他类型的参考代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**其中s为String类型*/</span>  </span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> Byte.parseByte(s);  </span><br><span class="line"><span class="type">short</span> <span class="variable">t</span> <span class="operator">=</span> Short.parseShort(s);  </span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(s);  </span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.parseLong(s);  </span><br><span class="line"><span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat(s);  </span><br><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(s);</span><br></pre></td></tr></table></figure><p>注意：当需要获取多选框checkbox值和多个电话号码值的时候，使用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] hobby =request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br></pre></td></tr></table></figure><p>将用户的多个输入值转换为字符串数组。</p><h3 id="3-中文乱码问题"><a href="#3-中文乱码问题" class="headerlink" title="3.中文乱码问题"></a>3.中文乱码问题</h3><p><strong>中文乱码产生的原因</strong>：由于tomcat服务器使用的是西文iso-8859-1的编码方式，而浏览器通常使用中文的GBK或者UTF-8编码进行中文文字的表示，因此在使用Servlet接收中文数据时和输出中文数据时容易产生乱码，解决乱码的方式如下：</p><p>解决乱码问题:</p><p>（1）接收中文参数：<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code> &#x2F;&#x2F;使用utf-8编码解析字符串</p><p>（2）在页面输出中文文字:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置输出编码类型和文档类型  </span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-servlet-返回结果"><a href="#4-servlet-返回结果" class="headerlink" title="4.servlet 返回结果"></a>4.servlet 返回结果</h3><p><strong>三种方式</strong></p><ol><li><p>返回文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter().println(<span class="string">&quot;文本&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>请求转发forward</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dstUrl</span>  <span class="operator">=</span> <span class="string">&quot;/index.jsp&quot;</span>;<span class="comment">//定义跳转的目标url</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(dstUrl);<span class="comment">//获取分发器</span></span><br><span class="line"><span class="comment">//实现页面跳转，同时将request，response对象传递到新目标</span></span><br><span class="line">dispatcher.forward(request, response);</span><br></pre></td></tr></table></figure><p>也可采用链式调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(dstUrl).forward(request, response);</span><br></pre></td></tr></table></figure></li><li><p>重定向redirect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dstUrl</span>  <span class="operator">=</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">response.sendRedirect(dstUrl);</span><br></pre></td></tr></table></figure></li></ol><p><strong>请求转发和重定向跳转方式的区别如下</strong>：</p><ol><li>使用方法：请求转发使用的是分发器forward()方法，分发器由request对象获取;重定向使用的是response对象的sendRedirect();</li><li>浏览器地址栏：请求转发的浏览器URL地址栏不变；重定向浏览器URL的地址栏改变；</li><li>实现：请求转发是服务器行为(request)，重定向是客户端行为(response)；</li><li>访问次数：转发是浏览器只做了一次访问请求；重定向是浏览器做了至少两次的访问请求；</li><li>数据传递：请求转发允许将对象数据传递到下一个目标资源，而重定新不可以；</li><li>资源范围：请求转发只能跳转到服务器内部资源；重定向可以调整到服务器外部</li></ol><p><strong>工作流程</strong></p><p><strong>请求转发forward</strong></p><ol><li>客户端发送Http请求数据给服务器</li><li>服务器接收请求数据并调用第一个Servlet处理逻辑</li><li>第一个Servlet处理完数据后调用forward()方法将请求传递给服务器内部的下一个Servlet</li><li>第二个servlet处理完数据后将最终处理结果返回给客户端</li></ol><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230618112943893.png" alt="image-20230618112943893"></p><p><strong>重定向redirect</strong></p><ol><li>客户端发送Http请求数据给服务器</li><li>服务器接收请求数据并调用一个Servlet处理逻辑</li><li>服务器调用sendRedirect()方法将处理结果放进HTTP响应头中并返回给客户端</li><li>客户端收到响应结果后，从HTTP响应头中取得相关信息，再次发送请求数据给服务器。</li></ol><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230618113257850.png" alt="image-20230618113257850"></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *根据用户输入参数设置页面跳转方式,type=r或者type=f</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@WebServlet(&quot;/pagejump&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageJumpServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest  request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span> (type==<span class="literal">null</span> || type.isEmpty())&#123;</span><br><span class="line">             response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">             response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">             response.getWriter().println(<span class="string">&quot;请输入页面跳转类型！(url?type=r或者f)&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">String</span> <span class="variable">dstUrl</span> <span class="operator">=</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">         <span class="comment">//重定向实现跳转</span></span><br><span class="line">         <span class="keyword">if</span> (type.equals(<span class="string">&quot;r&quot;</span>))&#123;  </span><br><span class="line">              response.sendRedirect(dstUrl);</span><br><span class="line">         &#125;elseif(type.equals(<span class="string">&quot;f&quot;</span>)) &#123;</span><br><span class="line">             <span class="comment">// 请求转发实现跳转并传递对象</span></span><br><span class="line">             <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;来自于与Servlet的问候&quot;</span>;</span><br><span class="line">             request.setAttribute(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">             request.getRequestDispatcher(dstUrl).forward(request, response);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-servlet处理-HTTP-不同类型请求"><a href="#5-servlet处理-HTTP-不同类型请求" class="headerlink" title="5.servlet处理 HTTP 不同类型请求"></a>5.servlet处理 HTTP 不同类型请求</h3><ul><li>Servlet的service()方法是请求的入口方法，HttpServlet实现service()方法在这个入口方法中根据不同的Http请求方法（如GET、POST请求）调用不同的方法。</li><li>HttpServlet中的Service方法会检验用来发送请求的HTTP方法(通过调用request.getMethod() ),并调用以下方法之一：<code>doGet</code>、<code>doPost</code>、doHead、doPut、doTrace、doOptions、doDelete.</li></ul><p>对应生命周期的服务周期。</p><h2 id="3-Servlet-的生命周期"><a href="#3-Servlet-的生命周期" class="headerlink" title="3.Servlet 的生命周期"></a>3.Servlet 的生命周期</h2><h3 id="1-四个周期"><a href="#1-四个周期" class="headerlink" title="1.四个周期"></a>1.四个周期</h3><p>Servlet的生命分为以下4部分：Servlet实例化–&gt;初始化–&gt;服务–&gt;销毁</p><p>（1）实例化。对应于new方法。当Servlet第一次被访问时，Web容器将会加载相应的Servlet到Java虚拟机并执行实例化，此时会生成一个Servlet对象。</p><p>（2）初始化，对应于init方法。当Servlet容器创建后，会调用并且仅调用一次init()方法，用于初始化Servlet对象。无论有多少客户机访问Servlet，都不会重复执行init（）。</p><p>（3）服务。对应service方法。service()方法是Servlet的核心，<strong>负责响应客户的请求</strong>。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。实际执行中是根据Http请求方法调用相应的do功能。</p><p>（4）销毁，对应destroy方法。destroy()方法仅执行一次，只在Web服务器端停止并卸载Servlet时执行。当Servlet对象被销毁时，将释放其占用的资源。</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230618134041622.png" alt="image-20230618134041622"></p><p>Servlet接口类中提供了Servlet生命周期中3个方法的定义，相关功能说明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException;      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req,  ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException;      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HttpServlet类中提供了service方法的具体实现，service()方法主要根据Http请求方法的不同调用不同的do方法进行处理。</p><p>注意几点：</p><p>（1）一个Servlet对象只有在第一次访问时被创建，之后将常驻内存，并使用该对象处理后的用户请求；<strong>inti()方法</strong></p><p>（2）一个Servlet对象在处理不同的客户端请求时，往往使用多线程执行，即针对每一个客户端请求开启一个线程；</p><p>（3）Servlet只有在web容器重启或者停止时候才会被销毁。<strong>destroy()方法</strong></p><h3 id="2-Servlet处理请求的过程"><a href="#2-Servlet处理请求的过程" class="headerlink" title="2.Servlet处理请求的过程"></a>2.Servlet处理请求的过程</h3><p>（1）客户端发送请求给服务器。</p><p>（2）容器根据请求及web.xml判断对应的Servlet是否存在，如果不存在则返回404。</p><p>（3）容器根据请求及web.xml判断对应的Servlet是否已经被实例化，若是相应的Servlet没有被实例化，则容器将会加载相应的Servlet到Java虚拟机并实例化。</p><p>（4）调用实例对象的service()方法，并开启一个新的线程去执行相关处理。调用servce方法，判断是调用doGet方法还是doPost方法。</p><p>（5）业务完成后响应相关的页面发送给客户端。</p><h2 id="4-过滤器FIlter"><a href="#4-过滤器FIlter" class="headerlink" title="4.过滤器FIlter"></a>4.过滤器FIlter</h2><h3 id="1-过滤器用途和工作原理"><a href="#1-过滤器用途和工作原理" class="headerlink" title="1.过滤器用途和工作原理"></a>1.过滤器用途和工作原理</h3><p><strong>用途：</strong></p><p>过滤器是一种Web组件，用于对客户端发送的请求信息和服务器返回的响应结果进行处理。<strong>即可以拦截请求和应答</strong></p><p><strong>工作原理：</strong></p><ul><li>通过使用过滤器，可以拦截客户端的请求和响应，查看、提取或者以某种方式操作正在客户端和服务器之间进行交换的数据。</li><li>通过使用过滤器，可以对Web组件的前期处理和后期处理进行控制。</li><li>过滤器可以有多个，以构成一个<strong>过滤器链</strong>。Servlet容器会根据过滤器的配置情况来决定过滤器的调用次序。</li></ul><p>过滤器使用的设计模式为责任链设计模式</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230618141212966.png" alt="image-20230618141212966"></p><h3 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h3><ul><li>EncodingFilter 字符编码过滤器 <a href="#%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8">点击查看示例</a><br>用于设置 HTTP 请求字符编码的过滤器，通过过滤器参数encoding指明使用何种字符编码，用于处理Html Form请求参数的中文问题。</li><li>AuthorityFilter 权限过滤器<a href="#%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E8%BF%87%E6%BB%A4%E5%99%A8">点击查看示例</a><br>在一个系统中通常有多个权限的用户。不同权限用户的可以浏览不同的页面。使用Filter进行判断不仅省下了代码量，而且如果要更改的话只需要在Filter文件里动下就可以。</li></ul><h3 id="3-过滤器的部署"><a href="#3-过滤器的部署" class="headerlink" title="3.过滤器的部署"></a>3.过滤器的部署</h3><p>1.定义的过滤器类必须要实现接口javax.servlet.Filter，并且实现该接口中定义的3个方法：</p><ul><li>vod init(…)：用于初始化过滤器。</li><li>void destroy()：用于销毁过滤器。</li><li>void doFilter(…)：用于执行过滤操作。</li></ul><p>2.在web.xml配置文件中部署Filter<br>用<filter>元素定义过滤器，<filter>元素有两个必要子元素：</p><ul><li><filter-name>用来设定过滤器的名字</li><li><filter-class >用来设定过滤器的类路径</li></ul><p>用<filter-mapping>配置过滤器的映射信息，有两个必要的子元素：</p><ul><li><filter-name>用来设定过滤器的名字</li><li><url-pattern>用来设定被过滤的组件</li></ul><p>3.用@WebFilter(“&#x2F;*”)部署</p><p>若用注解部署过滤器链则会随机调用过滤器，即无顺序</p><p>示例：</p><h4 id="编码过滤器"><a href="#编码过滤器" class="headerlink" title="编码过滤器"></a><strong>编码过滤器</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)resp;</span><br><span class="line"></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);<span class="comment">//调用下一个过滤器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>jee.demo.servlet.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用户权限过滤器"><a href="#用户权限过滤器" class="headerlink" title="用户权限过滤器"></a><strong>用户权限过滤器</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse)resp;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;LoginUser&quot;</span>)== <span class="literal">null</span>)&#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>jee.demo.servlet.filter.AuthenFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-过滤器链"><a href="#4-过滤器链" class="headerlink" title="4.过滤器链"></a>4.过滤器链</h3><p><strong>过滤器链的顺序是根据web.xml配置文件中<filter-mapping>元素的顺序决定的</strong>，若用注解部署过滤器链则会随机调用过滤器，即无顺序</p><h1 id="三-Spring-IOC-和单例设计模式"><a href="#三-Spring-IOC-和单例设计模式" class="headerlink" title="三. Spring IOC 和单例设计模式"></a>三. Spring IOC 和单例设计模式</h1><h2 id="1-Spring-的核心IOC-和-AOP"><a href="#1-Spring-的核心IOC-和-AOP" class="headerlink" title="1.Spring 的核心IOC 和 AOP"></a>1.Spring 的核心IOC 和 AOP</h2><p><strong>IoC（Inverse of Control 控制反转）</strong></p><p>控制反转:<strong>对象的创建交给外部容器完成</strong>。不直接在代码中创建对象。</p><p>IOC 容器的作用</p><ul><li>依赖处理，通过依赖查找或者依赖注入</li><li>管理托管的资源（Java Bean 或其他资源）的生命周期</li><li>管理配置（容器配置、外部化配置、托管的资源的配置）</li></ul><p><strong>控制反转解决对象的管理（创建、销毁等）问题。</strong></p><p>依赖注入（dependency injection）:<strong>实现对象之间的依赖关系。</strong>在创建完对象之后，对象之间的关系处理就是依赖注入。</p><p>Spring提供了IOC容器。无论创建对象、处理对象之间的依赖关系、对象创建的时间还是数量，都在Spring IOC容器配置完成。</p><p>IOC核心思想：资源不由资源的使用方管理，而由不使用资源的第三方管理。</p><p>好处（为什么要控制反转）：<br>（1）资源集中管理，实现资源的可配置和易管理；<br>（2）降低使用资源双方的依赖程度。</p><p><strong>AOP（Aspect Oriented Programming 面向切面编程）</strong></p><p>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个 热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑 的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h2 id="2-IOC-容器中对象的注入和装配"><a href="#2-IOC-容器中对象的注入和装配" class="headerlink" title="2.IOC 容器中对象的注入和装配"></a>2.IOC 容器中对象的注入和装配</h2><p>spring 默认采用单例模式对管理 Bean 对象</p><h3 id="基于-xml"><a href="#基于-xml" class="headerlink" title="基于 xml"></a>基于 xml</h3><p>基于 XML 的 Bean 装配是最基本的 Bean 装配方式之一。 在基于 XML 的 Spring 配置中声明一个 bean，使用 spring-beans 模式元素，参考如下：<code>&lt;bean id=&quot;..&quot; class=&quot;…&quot; /&gt;</code></p><p>Bean实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    Double price;</span><br><span class="line">    String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-config.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BYD&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.javaee.entity.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">vlaue</span>=<span class="string">&quot;202101&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">vlaue</span>=<span class="string">&quot;220&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">vlaue</span>=<span class="string">&quot;蓝色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext beanFactory=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-config.xml&quot;</span>);<span class="comment">//xml配置文件</span></span><br><span class="line">Car byd=(Car)beanFactory.getBean(<span class="string">&quot;BYD&quot;</span>);<span class="comment">//beanId </span></span><br><span class="line">    sout(byd);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><p>基于注解的自动化 Bean 装配是最常用 Bean 装配方式之一。需要我们对 Spring 的常用注解有个基本认识。spring 注解可以减少 xml 配置；利用 Java 的反射机制获取类结构信息，有效减少配置的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompactDisc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//Spring 会自动扫描，生成该 Java 类对应的 Bean 实例。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NovChopinCD</span> <span class="keyword">implements</span> <span class="title class_">CompactDisc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title=<span class="string">&quot;名称：十一月的萧邦&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist=<span class="string">&quot;周杰伦&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放专辑&quot;</span>+title+<span class="string">&quot;by&quot;</span>+artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CdPlayer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playCd</span><span class="params">()</span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-config.xml 文件配置,指定类所在包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.javaee&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJavaCfg</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BeanFactory bf=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-config.xml&quot;</span>);</span><br><span class="line">        CdPlayer cdPlayer=(CdPlayer) bf.getBean(<span class="string">&quot;cdPlayer&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;演示Spring的自动扫描装配&quot;</span>);</span><br><span class="line">        cdPlayer.playCd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">演示Spring的自动扫描装配</span><br><span class="line">播放专辑名称：十一月的萧邦by周杰伦</span><br></pre></td></tr></table></figure><p><strong>注解总结</strong></p><p><strong>@Component</strong>：代表 Spring IoC 会把该java类扫描生成 Bean 实例，位于 Java 类声明之前。对象 id 为类名第一个字母小写，即 CdPlayer 对应的 Bean id 为 cdPlayer。</p><p><strong>@Autowired</strong>：实现属性自动装配,Spring 会根据类型去寻找定义的 Bean 然后进行byType注入，如果需要 byName（byName 就是通 过 id 去标识）注入，增加@Qualifier 注释。例如上文中需要注入的是NovChopinCD类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;novChopinCD&quot;)</span></span><br><span class="line"><span class="keyword">private</span> CompactDisc cd;</span><br></pre></td></tr></table></figure><h3 id="基于-Java-配置类"><a href="#基于-Java-配置类" class="headerlink" title="基于 Java 配置类"></a>基于 Java 配置类</h3><p>通过 java 配置类配置 Bean 的优点：</p><p>（1）更加强大：自动装配实现的功能，它都能实现，还能实现自动装配不能实现的功能。</p><p>（2）容易理解：通过 java 代码原生态的方式来配置 Bean，代 码读起来也比较容易理解。</p><p>（3）类型安全并且对重构友好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is MyBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.javaee.anntation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">myBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line">        MyBean myBean=(MyBean) context.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br><span class="line">        myBean.say();</span><br><span class="line"></span><br><span class="line">        CdPlayer cdPlayer=(CdPlayer) context.getBean(<span class="string">&quot;cdPlayer&quot;</span>);</span><br><span class="line">        cdPlayer.playCd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is MyBean</span><br><span class="line">播放专辑名称：十一月的萧邦by周杰伦</span><br></pre></td></tr></table></figure><p>注解总结</p><p><strong>@Configuration</strong>：表示该类是一个配置类并用于构建 bean 定义，初始化 Spring 容器，被注解类包含有一个或多个被@Bean 注解的方法，这些方法将会被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类进行扫描</p><p><strong>@ComponentScan</strong>：扫描定义的包,如@ComponentScan( basePackages &#x3D; “jee.java.config” )</p><p><strong>@Bean</strong>：表明该类交由Spring管理，若未指定名称，默认采用的是“方法名”+“首字母小写”的配置方式，即方法mybean的id为mybean。</p><h2 id="3-单例设计模式"><a href="#3-单例设计模式" class="headerlink" title="3.单例设计模式"></a>3.单例设计模式</h2><p><strong>定义</strong>：</p><p>只需要三步就可以保证对象的唯一性<br>(1) 不允许其他程序用new对象,即<strong>私有化该类的构造函数</strong><br>(2) 在该类中创建对象<br>(3) 对外提供一个可以让其他程序获取该对象的方法</p><p><strong>优点</strong></p><p>单例模式主要是为了避免因为创建了多个实例造成资源的浪费，且多个实例由于多次调用容易导致结果结果出现错误，而使用单例模式能够保证整个应用中有且只有一个实例。</p><p><strong>懒汉式</strong>,没有考虑线程安全，比饿汉更节省资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>饿汉式</strong>,没有懒加载，可能会造成内存的浪费</p><p>实现比较简单，在类加载的时候就完成了实例化，避免了线程的同步问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-SpringBoot-核心配置"><a href="#四-SpringBoot-核心配置" class="headerlink" title="四. SpringBoot 核心配置"></a>四. SpringBoot 核心配置</h1><h2 id="1-SpringBoot-框架的特点"><a href="#1-SpringBoot-框架的特点" class="headerlink" title="1.SpringBoot 框架的特点"></a>1.SpringBoot 框架的特点</h2><p>•可快速构建独立的Spring应用 </p><p>•直接嵌入Tomcat、Jetty和Undertow服务器（无需部署WAR文件）</p><p>•提供依赖启动器简化构建配置</p><p>•极大程度的自动化配置Spring和第三方库</p><p>•提供生产就绪功能</p><p>•极少的代码生成和XML配置</p><p>•约定大于配置</p><h2 id="2-springboot-项目的代码结构"><a href="#2-springboot-项目的代码结构" class="headerlink" title="2.springboot 项目的代码结构"></a>2.springboot 项目的代码结构</h2><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619014641653.png" alt="image-20230619014641653"></p><h2 id="3-SpringBoot-的配置文件"><a href="#3-SpringBoot-的配置文件" class="headerlink" title="3.SpringBoot 的配置文件"></a>3.SpringBoot 的配置文件</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a><strong>application.properties</strong></h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.address</span>=<span class="string">80</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8443</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.config.additional-location</span>= <span class="string"></span></span><br><span class="line"><span class="attr">spring.config.location</span>= <span class="string"></span></span><br><span class="line"><span class="attr">spring.config.name</span>=<span class="string">application</span></span><br></pre></td></tr></table></figure><h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a><strong>application.yaml</strong></h3><p>•YAML文件格式是Spring Boot支持的一种JSON超集文件格式。</p><p>•相较于传统的Properties配置文件，YAML文件以数据为核心，是一种更为直观且容易被电脑识别的数据序列化格式。</p><p>•application.yaml文件的工作原理和application.properties一样。</p><p><strong>语法格式</strong>：key:（空格）value  缩进 2 个空格</p><ol><li>value的值为普通数据类型</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><ol start="2"><li>value的值为数组和单列集合</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//缩进式写法</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">hobby:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">play</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">read</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> </span><br><span class="line"><span class="string">//行内式写法</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">hobby:</span> [<span class="string">play</span>,<span class="string">read</span>,<span class="string">sleep</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>value的值为Map集合或对象</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//缩进式写法</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line"><span class="string">//行内式写法</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">map:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-配置文件的属性值的注入"><a href="#4-配置文件的属性值的注入" class="headerlink" title="4.配置文件的属性值的注入"></a>4.配置文件的属性值的注入</h2><h3 id="ConfigurationProperties-注入到整个类"><a href="#ConfigurationProperties-注入到整个类" class="headerlink" title="@ConfigurationProperties(注入到整个类)"></a><strong>@ConfigurationProperties(注入到整个类)</strong></h3><p>使用@ConfigurationProperties注解批量注入属性值时，要保证配置文件中的属性与对应实体类的属性一致，否则无法正确获取并注入属性值。</p><p>@ConfigurationProperties其实可以看成多个@Value注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xzx</span></span><br></pre></td></tr></table></figure><h3 id="Value-单个值的注入"><a href="#Value-单个值的注入" class="headerlink" title="@Value()单个值的注入"></a>@Value()单个值的注入</h3><p>语法：@Value(“${key}”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>两种注解的对比分析</strong></p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619023706905.png" alt="image-20230619023706905"></p><p>关键：@ConfigurationProperties需要有set()，@Value无需set方法。</p><h1 id="五-SpringBoot-Web-层"><a href="#五-SpringBoot-Web-层" class="headerlink" title="五. SpringBoot Web 层"></a>五. SpringBoot Web 层</h1><h2 id="1-映射到-URL"><a href="#1-映射到-URL" class="headerlink" title="1.映射到 URL"></a>1.映射到 URL</h2><p>@RequestMapping是SpringBoot提供的⼀个地址映射的基础注解，主要⽤途是将Web请求与请求处理类中的⽅法 进⾏映射。 </p><p>@RequestMapping注解拥有以下的六个配置属性： </p><ul><li>value :映射的请求URL或者其别名 </li><li>method :兼容HTTP的⽅法名 </li><li>params :根据HTTP参数的存在、缺省或值对请求进⾏过滤 </li><li>header :根据HTTP Header的存在、缺省或值对请求进⾏过滤 </li><li>consume :设定在HTTP请求正⽂中允许使⽤的媒体类型 </li><li>product :在HTTP响应体中允许使⽤的媒体类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span>&#123;</span><br><span class="line"> <span class="meta">@RequestMapping(value = &quot;/demo/home&quot;, method = RequestMethod.GET)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">home</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以采⽤分层的形式表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/demo&quot;）</span></span><br><span class="line"><span class="meta">public class DemoController&#123;</span></span><br><span class="line"><span class="meta"> @RequestMapping(value = &quot;/home&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta"> public String home()&#123;</span></span><br><span class="line"><span class="meta"> return &quot;home&quot;;</span></span><br><span class="line"><span class="meta"> &#125;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>映射到多个URL地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &#123;&quot;path1&quot;, &quot;path2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">multiUrl</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;演示映射到多个不同的url地址&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring5之后，出现了更简单的Http 请求⽅法映射的注解，分别是：</p><p>@GetMapping ⽤于处理HTTP GET请求 </p><p>@PostMapping ⽤于处理HTTP POST请求 </p><p>@PutMapping ⽤于处理HTTP PUT请求 </p><p>@DeleteMapping ⽤于处理HTTP DELETE请求 </p><p>@PatchMapping ⽤于处理HTTP PATCH请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">/*指定url地址*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpMappingController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/method&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleGetMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;处理Http GET请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在类前还需@RequestMapping(“api”)。</p><h2 id="2-返回结果"><a href="#2-返回结果" class="headerlink" title="2.返回结果"></a>2.返回结果</h2><p>返回结果类型通常包括：返回HTML页面，返回JSON文本数据。</p><p>在控制器类上标注@Controller 注解，则方法默认返回页面视图，即HTML页面。</p><p>在方法上如果使用@ResponseBody 注解，则直接将返回值序列化json。</p><p>使用Model可以将数据传递到视图页面，下面两种写法功能相同。ModelAndView同时包含了视图和模型对象。</p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619143343932.png" alt="image-20230619143343932"></p><p>在控制器类上标注@RestController，则所有方法都返回JSON数据。可以在方法返回Map对象，该</p><p>对象会自动被转换为JSON数据格式。</p><h2 id="3-控制器和Servlet的区别"><a href="#3-控制器和Servlet的区别" class="headerlink" title="3.控制器和Servlet的区别"></a>3.控制器和Servlet的区别</h2><p>•1.一个Servlet类只能处理一个HTTP请求，需要通过action等参数进行类别区分；</p><p>•2. Servlet获取前端数据比较低级，需要手动进行转换；</p><p>•3.后端数据校验需要手动完成；</p><p>•4.使用response输出响应比较繁琐；</p><p>•5.页面跳转代码复杂；</p><h2 id="4-Controller和-RestController的区别"><a href="#4-Controller和-RestController的区别" class="headerlink" title="4.@Controller和@RestController的区别"></a>4.@Controller和@RestController的区别</h2><p>@RestController &#x3D; @Controller + @ResonseBody</p><p>使用**@Controller<strong>注解作用于类声明时，当方法返回值为String类型，默认表示返</strong>回该字符串对应的页面视图**，该页面后缀为.html，位于resourses&#x2F;templates目录下。在方法前面使用@ResponseBody表示返回文本数据。</p><p>使用**@RestController<strong>注解作用于类声明时，表示该类所有的方法均</strong>返回文本数据**，而非返回视图页面名称。</p><p>@Controller返回页面视图名称时，需要添加Thymeleaf依赖放起到效果。</p><h2 id="5-前端参数的获取"><a href="#5-前端参数的获取" class="headerlink" title="5.前端参数的获取"></a>5.<strong>前端参数的获取</strong></h2><h3 id="获取单个参数-RequestParam"><a href="#获取单个参数-RequestParam" class="headerlink" title="获取单个参数--@RequestParam"></a>获取单个参数--@RequestParam</h3><p>&#x2F;test&#x2F;hello?a&#x3D;123    key&#x3D;value 类型 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(“hello”)</span> </span><br><span class="line">Public String <span class="title function_">toHello</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> a )</span>&#123; </span><br><span class="line"><span class="keyword">return</span> “hello”; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述过程没有显式指定@RequestParam的value或name属性，因此形参名必须与请求参数名⼀⼀对应。如果我 们显式指定了value或name属性，那么形参名就可以任意了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(“hello”)</span> </span><br><span class="line">Public String <span class="title function_">toHello</span><span class="params">(<span class="meta">@RequestParam(&quot;a&quot;)</span> <span class="type">int</span> age )</span>&#123; </span><br><span class="line"><span class="keyword">return</span> “hello”; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestParam标注在⽅法形参上，⽤来获取HTTP请求参数值。 </li><li>如果形参为基本类型，可以获取对应的请求参数值。此时需要注意请求参数名是否需要与形参名⼀致（是否 指定value或name属性）。 </li><li>如果形参为Map或MultiValueMap，则可以⼀次性获取全部请求参 数。此时请求参数名与形参名⽆关。</li><li>required属性默认为true，此时必须保证HTTP请求中包含与形参⼀致的请求参数，否则会报错。 </li><li>我们可以使⽤defaultValue属性指定默认值，此时required⾃动指定成false，表示如果没有提供该请 求参数，则会使⽤该值。</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(“hello”)</span> </span><br><span class="line">Public String <span class="title function_">toHello</span><span class="params">(<span class="meta">@RequestParam(required = false, defaultValue = &quot;1000&quot;)</span> <span class="type">int</span> a )</span>&#123; </span><br><span class="line"><span class="keyword">return</span> “hello”; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取路径参数-PathVariable"><a href="#获取路径参数-PathVariable" class="headerlink" title="获取路径参数--@PathVariable"></a>获取路径参数--@PathVariable</h3><p>路径变量&#x2F;test&#x2F;hello&#x2F;123</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(“hello/&#123;a&#125;”)</span></span><br><span class="line">Public String <span class="title function_">toHello</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a )</span>&#123;</span><br><span class="line"><span class="keyword">return</span> “hello”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取JSON格式的参数值-RequestBody"><a href="#获取JSON格式的参数值-RequestBody" class="headerlink" title="获取JSON格式的参数值--@RequestBody"></a>获取JSON格式的参数值--@RequestBody</h3><p>@RequestBody标注在⽅法形参上，⽤来接收HTTP请求体中的json数据。</p><p>注意：由于Json数据只能通过POST请求进⾏传递(数据存放在Http Body中)，因此@RequestBody需要 和@PostMapping配置使⽤，此时不能使⽤GET请求。此时Content-Type对应的值为 application&#x2F;json。</p><p>Spring会使⽤HttpMessageConverter对象⾃动将对应的数据解析成指定的Java对象。例如，我们发送如下 HTTP请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8080/student</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Xianhuii&quot;,</span><br><span class="line">  &quot;age&quot;: 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">getJsonData</span><span class="params">(<span class="meta">@RequestBody</span>  Student student)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Student内容:&quot;</span>+ student);</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⼀般来说在Controller⽅法中仅可声明⼀个@RequestBody注解的参数，将请求体中的所有数据转换成对应的 POJO对象。</p><h2 id="6-发送响应数据"><a href="#6-发送响应数据" class="headerlink" title="6.发送响应数据"></a>6.发送响应数据</h2><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>@ResponseBody可以标注在类或⽅法上，它的作⽤是将⽅法返回值作为HTTP响应体发回给客户端， 与@ResquestBody刚好相反。 我们可以将它标注到⽅法上，表示仅有handle()⽅法的返回值会被直接绑定到响应体中，注意到此时类标注成@Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@ResponseBody</span></span><br><span class="line">     <span class="meta">@GetMapping(&quot;/student&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> Student <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Xianhuii&quot;</span>, <span class="number">18</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们也可以将它标注到类上，表示类中所有⽅法的返回值都会被直接绑定到响应体中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Xianhuii&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，@ResponseBody和@Controller相结合，就变成了@RestController注解，也是前后端分离中最常⽤的 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Xianhuii&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果客户端发送如下HTTP请求：GET <a href="http://localhost:8080/student%E3%80%82%E6%AD%A4%E6%97%B6%E4%B8%8A%E8%BF%B0%E4%BB%A3%E7%A0%81%E9%83%BD%E4%BC%9A%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84HTTP%E5%93%8D">http://localhost:8080/student。此时上述代码都会有相同的HTTP响</a> 应，表示接收到student的json数据：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 04 May 2021 13:04:15 GMT</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=60</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Xianhuii&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>总结@ResponseBody的⽤法：</p><ul><li>@ResponseBody表示将⽅法返回值直接绑定到web响应体中。 </li><li>@ResponseBody可以标注到类或⽅法上。类上表示内部所有⽅法的返回值都直接绑定到响应体中，⽅法上表 示仅有该⽅法的返回值直接绑定到响应体中。 </li><li>@ResponseBody标注到类上时，与@Controller相结合可以简写成@RestController，这也是通常使⽤的注解。 我们可以灵活地构造合适的返回对象，结合@ResponseBody，⽤作与实际项⽬最匹配的响应体返回。</li></ul><h2 id="7-数据校验"><a href="#7-数据校验" class="headerlink" title="7.数据校验"></a>7.数据校验</h2><h3 id="Valid-POJO类校验"><a href="#Valid-POJO类校验" class="headerlink" title="@Valid-POJO类校验"></a>@Valid-POJO类校验</h3><p>实现方法：</p><p>（1）在POJO类的属性添加对应的校验注解。</p><p>（2）在控制器方法中使用@Valid注解表示对参数进行校验，同时后面使用Errors&#x2F;BindingResult来捕获错误信息，并进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span>   </span><br><span class="line">    <span class="meta">@Size(min = 2, message = &quot;姓名长度不能小于2个字符&quot;)</span>    </span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@NotNull</span>   </span><br><span class="line">    <span class="meta">@Length(min = 6, max = 6, message = &quot;学号长度为6位&quot;)</span>    </span><br><span class="line">    String studentNo;   </span><br><span class="line">    <span class="meta">@Min(value = 10, message = &quot;年龄不能小于10岁&quot;)</span></span><br><span class="line">    Integer age;    </span><br><span class="line">    <span class="meta">@Email(message = &quot;Email地址格式不符合规范&quot;)</span>    </span><br><span class="line">    String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619144302671.png" alt="image-20230619144302671"></p><h3 id="Validated-方法参数合法性校验"><a href="#Validated-方法参数合法性校验" class="headerlink" title="@Validated-方法参数合法性校验"></a>@Validated-方法参数合法性校验</h3><p>实现方法：</p><ol><li>在控制器类标注@Validated 注解。</li><li>在方法中可以使用JSR303提供的注解来完成校验，例如@NotNull等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;validate&quot;)</span> </span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateController</span> &#123;    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;param&quot;)</span>    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span>  String <span class="title function_">validateParam</span><span class="params">( <span class="meta">@RequestParam</span> <span class="meta">@Min(value = 100,message = &quot;不能小于100&quot;)</span> Integer value)</span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;输入正确,数值为:&quot;</span>+ value;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Valid和-Validated的区别"><a href="#Valid和-Validated的区别" class="headerlink" title="@Valid和@Validated的区别"></a>@Valid和@Validated的区别</h3><p>@Valid是使用Hibernate validation的时候使用</p><p>@Validated是只用Spring Validator校验机制使用</p><blockquote><p>说明：java的JSR303声明了@Valid这类接口，而Hibernate-validator对其进行了实现。</p></blockquote><p><strong>注解位置：</strong></p><p>@Validated：用在类型、方法和方法参数上。但不能用于成员属性（field）</p><p>@Valid：可以用在方法、构造函数、方法参数和成员属性（field）上</p><h1 id="六-Mybatis-–-ORM"><a href="#六-Mybatis-–-ORM" class="headerlink" title="六. Mybatis – ORM"></a>六. Mybatis – ORM</h1><p>持久化是程序数据在瞬时状态和持久状态间转换的过程</p><h2 id="1-ORM（Object-Relational-Mapping）"><a href="#1-ORM（Object-Relational-Mapping）" class="headerlink" title="1.ORM（Object Relational Mapping）"></a>1.ORM（Object Relational Mapping）</h2><p>编写程序的时候，以面向对象的方式处理数据</p><p>保存数据的时候，却以关系型数据库的方式存储</p><p><strong>ORM就是一种为了解决面向对象与关系型数据库中数据类型不匹配的技术，它通过描述Java对象与数据库表之间的映射关系，自动将Java应用程序中的对象持久化到关系型数据库的表中。</strong></p><p><strong>ORM解决方案包含下面四个部分</strong></p><ul><li>在持久化对象上执行基本的增、删、改、查操作</li><li>对持久化对象提供一种查询语言或者API</li><li>对象关系映射工具</li><li>提供与事务对象交互、执行检查、延迟加载以及其他优化功能</li></ul><h2 id="2-Mybatis和ORM"><a href="#2-Mybatis和ORM" class="headerlink" title="2.Mybatis和ORM"></a>2.Mybatis和ORM</h2><p>MyBatis是一个数据持久层(ORM)框架。把实体类和SQL语句之间建立了映射关系，是一种半自动化的ORM实现</p><p><strong>MyBatis的工作原理</strong></p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619150634196.png" alt="image-20230619150634196"></p><h2 id="3-MySQL数据查询分页查询SQL"><a href="#3-MySQL数据查询分页查询SQL" class="headerlink" title="3.MySQL数据查询分页查询SQL"></a>3.MySQL数据查询分页查询SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit <span class="keyword">start</span>,count</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p><strong>说明:</strong></p><ol><li>limit是分页查询关键字</li><li>start表示开始行索引，默认是0</li><li>count表示查询条数</li></ol><p>limit0,10 表示从0开始查询十条数据</p><p><strong>n:求第几页的数据</strong><br><strong>m:每页显示m条数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">公式:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename limit (n<span class="number">-1</span>)<span class="operator">*</span>m,m;</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line">第一页数据,一页显示<span class="number">3</span>行数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename limit <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">第二页数据,一页显示<span class="number">3</span>行数据   (<span class="number">2</span><span class="number">-1</span>)<span class="operator">*</span><span class="number">3</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename limit <span class="number">3</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询前端需要传递两个参数"><a href="#分页查询前端需要传递两个参数" class="headerlink" title="分页查询前端需要传递两个参数"></a>分页查询前端需要传递两个参数</h3><p>1、pageNo，因为点第几页是用户决定的。所以需要传参数。</p><p>2、pageSize，因为用户可选每页展示条数(如10，20，50等)(其实如果固定分页大小的话,这个参数可以不传)</p><p>对应limit start,count</p><h2 id="4-Mapper-层代码的编写-Mapper"><a href="#4-Mapper-层代码的编写-Mapper" class="headerlink" title="4.Mapper 层代码的编写@Mapper"></a>4.Mapper 层代码的编写@Mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> </span><br><span class="line">Public <span class="keyword">interface</span> <span class="title class_">UserMapper</span>&#123; </span><br><span class="line">    <span class="meta">@Select(“xxxxx”)</span> </span><br><span class="line">    Public List <span class="title function_">listAll</span><span class="params">()</span>; </span><br><span class="line">    Public List <span class="title function_">findByName</span><span class="params">(<span class="meta">@Param(“username”)</span> String username)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">as</span> u <span class="keyword">where</span> u.name<span class="operator">=</span>#&#123;username&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Mybatis-整合的两种方式"><a href="#5-Mybatis-整合的两种方式" class="headerlink" title="5.Mybatis 整合的两种方式"></a>5.Mybatis 整合的两种方式</h2><h3 id="基于注解-1"><a href="#基于注解-1" class="headerlink" title="基于注解"></a>基于注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**   根据id查询对象   */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from teacher where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Teacher <span class="title function_">getById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">  <span class="comment">/** 查询所有   */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">listAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** * 更新   */</span></span><br><span class="line"><span class="meta">@Update(&quot;update teacher set name=#&#123;name&#125;,office=#&#123;office&#125;,age=#&#123;age&#125;,email=#&#123;email&#125;, &quot; + &quot; cellphone=#&#123;cellphone&quot; +            &quot;&#125;, professional_title=#&#123;professionalTitle&#125;  where id=#&#123;id&#125; &quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Teacher teacher)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 删除   */</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from teacher where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  新增   */</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into teacher(name,office,age,email, cellphone,professional_title) values(#&#123;name&#125;,#&#123;office&#125;,&quot; + &quot; &quot; + &quot;#&#123;age&#125;, #&#123;email&#125;, #&#123;cellphone&#125;,  #&#123;professionalTitle&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;, keyProperty = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(Teacher teacher)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>为了获取新记录的主键，需要将属性useGeneratedKeys设置为 true,同时设置keyColumn(对应数据表主键字段)和 keyProperty(对象的主键属性)。新增主键值将回填到teacher对象中</p></blockquote><h3 id="基于XML映射文件"><a href="#基于XML映射文件" class="headerlink" title="基于XML映射文件"></a>基于XML映射文件</h3><p>在映射文件中，<mapper>元素是映射文件的根元素，其他元素都是它的子元素。 </p><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/image-20230619155137039.png" alt="image-20230619155137039"></p><p>xml映射文件通常放在resouces目录下的mapper文件夹中。内容构造如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace表示命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.javaee.ch09mybatis.crud.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">编写接口方法的具体实现</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            select * from  student where  id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert  into student(student_no,name,home_address,class_no, sex, birthday, </span><br><span class="line">enroll_time)</span><br><span class="line">    values(#&#123;studentNo&#125;,#&#123;name&#125;,#&#123;homeAddress&#125;,#&#123;classNo&#125;,#&#123;sex&#125;, #&#123;birthday&#125;, </span><br><span class="line">#&#123;enrollTime&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.javaee.ch09mybatis.crud.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select  * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLikeName&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.javaee.ch09mybatis.crud.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name like CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">      update   student set student_no=#&#123;studentNo&#125;,  name=#</span><br><span class="line">&#123;name&#125;,home_address=#&#123;homeAddress&#125;,</span><br><span class="line">      class_no=#&#123;classNo&#125;, sex=#&#123;sex&#125;, birthday=#&#123;birthday&#125;, enroll_time=#</span><br><span class="line">&#123;enrollTime&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from student where  id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-Mybatis-接口的传参"><a href="#6-Mybatis-接口的传参" class="headerlink" title="6.Mybatis 接口的传参"></a>6.Mybatis 接口的传参</h2><h3 id="1-单个参数传递"><a href="#1-单个参数传递" class="headerlink" title="1. 单个参数传递"></a>1. 单个参数传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在接口中定义放法，参数形式如下</span></span><br><span class="line"><span class="comment">//使用单个参数</span></span><br><span class="line">Student <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用单个参数查询：</span></span><br><span class="line"><span class="comment">    parameterType：表示参数数据类型（可不写）</span></span><br><span class="line"><span class="comment">    使用  #&#123;参数名&#125; 获取参数的值</span></span><br><span class="line"><span class="comment">    对参数名称无要求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.krain.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用方法时只需要传入相应类型的单个值即可</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> dao.selectById(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="2-使用-param为参数命名传递多个参数"><a href="#2-使用-param为参数命名传递多个参数" class="headerlink" title="2. 使用@param为参数命名传递多个参数"></a>2. 使用@param为参数命名传递多个参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  在接口文件的对应方法形参中，使用以下格式进行命名</span></span><br><span class="line"><span class="comment">*   多个参数：为参数命名，在形参前加上  @Param(&quot;自定义参数名&quot;)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiParam</span><span class="params">(<span class="meta">@Param(&quot;myname&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;myage&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用时传入对应的参数值</span></span><br><span class="line">List&lt;Student&gt; students = dao.selectMultiParam(<span class="string">&quot;康康&quot;</span>,<span class="number">23</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多个参数：使用param命名 使用为参数起得名称 eg：#&#123;命名&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.krain.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-使用Java对象作为方法的参数"><a href="#3-使用Java对象作为方法的参数" class="headerlink" title="3. 使用Java对象作为方法的参数"></a>3. 使用Java对象作为方法的参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在接口中定义方法，参数形式如下</span></span><br><span class="line"><span class="comment">//多个参数：使用java对象作为方法的参数</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiObject</span><span class="params">(QueryParam queryParam)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多个参数：使用java对象的属性值作为参数实际值</span></span><br><span class="line"><span class="comment">    原始语法：#&#123;属性名, javaType=java中类型名称, jdbcType=数据库中的类型名&#125;</span></span><br><span class="line"><span class="comment">    eg:  #&#123;queryName, javaType=String, jdbcType=Varchar&#125;</span></span><br><span class="line"><span class="comment">        #&#123;queryAge, javaType=Integer, jdbcType=Integer&#125;</span></span><br><span class="line"><span class="comment">    简写：#&#123;属性名&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.krain.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name=#&#123;queryName&#125; or age=#&#123;queryAge&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用时传入相应对象</span></span><br><span class="line">List&lt;Student&gt; students = dao.selectMultiObject(queryParam);</span><br></pre></td></tr></table></figure><h3 id="4-使用位置传参"><a href="#4-使用位置传参" class="headerlink" title="4. 使用位置传参"></a>4. 使用位置传参</h3><p>  在方法的参数中，形参的顺序对应映射文件中参数的顺序，arg0指形参中第一个值，arg1代表第二个，以此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在接口中定义放法，参数形式如下</span></span><br><span class="line"><span class="comment">//多个参数：使用位置传参</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiPosition</span><span class="params">(String name, Integer age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据参数位置传参    arg后面的数字代表参数所在的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiPosition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.krain.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name=#&#123;arg0&#125; or age=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用代码</span></span><br><span class="line">List&lt;Student&gt; students = dao.selectMultiPosition(<span class="string">&quot;康康&quot;</span>, <span class="number">23</span>);</span><br></pre></td></tr></table></figure><h3 id="5-使用map传参"><a href="#5-使用map传参" class="headerlink" title="5. 使用map传参"></a>5. 使用map传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在接口中定义放法，参数形式如下</span></span><br><span class="line"><span class="comment">//使用Map传递多个参数</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用Map键值对传参，形式：#&#123;key名&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.krain.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name=#&#123;mapName&#125; or age=#&#123;mapAge&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line">Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">data.put(<span class="string">&quot;mapName&quot;</span>,<span class="string">&quot;krain&quot;</span>);</span><br><span class="line">data.put(<span class="string">&quot;mapAge&quot;</span>,<span class="number">23</span>);</span><br><span class="line">List&lt;Student&gt; students = dao.selectMultiMap(data);</span><br></pre></td></tr></table></figure><h2 id="7-基于mybatis的模糊查询"><a href="#7-基于mybatis的模糊查询" class="headerlink" title="7.基于mybatis的模糊查询"></a>7.基于mybatis的模糊查询</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fuzzyQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bin.pojo.Book&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.book where bookName like concat(&#x27;%&#x27;,#&#123;info&#125;,&#x27;%&#x27;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>like concat关键字</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fuzzyQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bin.pojo.Book&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.book where bookName like &#x27;%#&#123;info&#125;%&#x27;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-基于Mybatis的动态多条件查询"><a href="#8-基于Mybatis的动态多条件查询" class="headerlink" title="8.基于Mybatis的动态多条件查询"></a>8.基于Mybatis的动态多条件查询</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByNameAndClassNo&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.javaee.ch09mybatis.crud.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">        and name like CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classNo!=null&quot;</span>&gt;</span></span><br><span class="line">        and class_no like CONCAT(&#x27;%&#x27;, #&#123;classNo&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>where 1&#x3D;1</strong>⽤于保证SQL语法正确性。如果没有添加1&#x3D;1，则当name和home_address都为空时， SQL语句将变为 <code>select * from student where</code>,成为⼀个⾮法的SQL语句。</p><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>使⽤“where”标签会根据它包含的标签中是否有返回值，进⾏‘where’关键词的插⼊。另外，如果标签返回的内容 是以AND 或OR 开头的，则会删除。使⽤where标签之后将不在需要之前的1&#x3D;1的条件，上述联合查询功能使⽤ where标签实现的具体代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByNameAndClassNo&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.javaee.ch09mybatis.crud.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and name like CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classNo!=null and classNo!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and class_no like CONCAT(&#x27;%&#x27;, #&#123;classNo&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>Set标签⽤于动态更新语句。set 元素可以⽤于动态包含需要更新的列，忽略其它不更新的列。例如，程序只需要更 新student⾮空的属性值，mapper接⼝类代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateIfExists</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateIfExists&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentNo !=null and !=&#x27;&#x27;&quot;</span>&gt;</span>student_no=#&#123;studentNo&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and !=&#x27;&#x27;&quot;</span>&gt;</span>name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;homeAddress !=null and !=&#x27;&#x27;&quot;</span>&gt;</span>home_address=#&#123;homeAddress&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classNo !=null and !=&#x27;&#x27;&quot;</span>&gt;</span>class_no=#&#123;classNo&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex !=null&quot;</span>&gt;</span>sex=#&#123;sex&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age !=null and age&gt;0&quot;</span>&gt;</span>age=#&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday !=null&quot;</span>&gt;</span>birthday=#&#123;birthday&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enrollTime !=null&quot;</span>&gt;</span>enroll_time=#&#123;enrollTime&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>批量操作是数据操作常常碰到的情景，例如要导⼊⼀个excel⽂件记录到数据中，往往需要使⽤批量插⼊的⽅式来 提⾼效率，同时，批量删除和其他的批量处理也是业务中经常碰到的操作。此时，可以foreach标签来实现批量操 作。foreach可以遍历指定集合，动态构造所需的 SQL语句。。⽐如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>foreach 元素的功能⾮常强⼤，它允许你指定⼀个集合，声明可以在元素体内使⽤的集合项（item）和索引 （index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加 多余的分隔符，看它多智能！</p><p> 提示 : 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 foreach。当使 ⽤可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使⽤ Map 对象（或 者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><p><strong>批量插⼊数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**批量插⼊*/</span></span><br><span class="line"> <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">batchInsert</span><span class="params">(List&lt;Student&gt; list)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    批量插⼊--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsert&quot;</span>  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">     insert  into student(student_no,name,home_address,class_no, sex, birthday, </span><br><span class="line">enroll_time) values</span><br><span class="line"><span class="comment">&lt;!--        collcetion对应集合名称, item对应集合元素, separator表示分隔符--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;s&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">          (#&#123;s.studentNo&#125;,#&#123;s.name&#125;,#&#123;s.homeAddress&#125;,#&#123;s.classNo&#125;,#&#123;s.sex&#125;, #</span><br><span class="line">    &#123;s.birthday&#125;, #&#123;s.enrollTime&#125;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：和insert插⼊操作⼀样，需要使⽤useGeneratedKeys属性值才能获得主键id并回填到对象</p><p><strong>批量删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**批量删除*/</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">batchDelete</span><span class="params">(List&lt;Student&gt; list)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--批量删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;batchDelete&quot;</span>&gt;</span></span><br><span class="line">    delete  from  student where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;student&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        #&#123;student.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SQL⽚段-sql"><a href="#SQL⽚段-sql" class="headerlink" title="SQL⽚段 sql"></a>SQL⽚段 sql</h3><p>有时候可能某个 sql 语句我们⽤的特别多，为了增加代码的重⽤性，简化代码，我们需要将这些代码抽取出来，然 后使⽤时直接调⽤。代码⽚段的使⽤分为代码⽚段定义和使⽤两部分。</p><p>定义⽚段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span>&gt;</span></span><br><span class="line">select id,class_no,student_no,name from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使⽤⽚段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectall&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接⼝类中使⽤动态 SQL，可以使⽤ script 元素。⽐如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&#123;&quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;update Author&quot;,</span></span><br><span class="line"><span class="meta"> &quot;  &lt;set&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;    &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;    &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;    &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;    &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;  &lt;/set&gt;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;where id=#&#123;id&#125;&quot;,</span></span><br><span class="line"><span class="meta"> &quot;&lt;/script&gt;&quot;&#125;)</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">updateAuthorValues</span><span class="params">(Author author)</span></span><br></pre></td></tr></table></figure><h2 id="9-Mybatis-plus"><a href="#9-Mybatis-plus" class="headerlink" title="9.Mybatis-plus"></a>9.Mybatis-plus</h2><p>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><strong>特性</strong></p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="10-对象关联关系"><a href="#10-对象关联关系" class="headerlink" title="10.对象关联关系"></a>10.对象关联关系</h2><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/clip_image002.png" alt="img"></p><p><strong>一对一</strong></p><ul><li>主键共享<br>两张表的主键，建立外键约束。</li><li>外键唯一<br>子表添加一个新的字段并给该字段添加唯一约束和外键约束，然后关联父表主键字段。</li></ul><p><strong>一对多</strong></p><ul><li>外键添加在多的一方，关联一的主键。</li></ul><p> <strong>多对多</strong></p><ul><li>中间表：<strong>创建一个中间表，中间表的两个普通字段分别关联另两张表的主键。</strong></li></ul><h1 id="七-Redis-缓存和RabbitMQ"><a href="#七-Redis-缓存和RabbitMQ" class="headerlink" title="七. Redis 缓存和RabbitMQ"></a>七. Redis 缓存和RabbitMQ</h1><h2 id="1-Redis"><a href="#1-Redis" class="headerlink" title="1.Redis"></a>1.Redis</h2><p>Redis 完全是基于内存的操作，所以很快。还有因为key-value结构简单。是一个高性能的key-value非关系型数据库</p><h3 id="端口号6379"><a href="#端口号6379" class="headerlink" title="端口号6379"></a>端口号6379</h3><h3 id="redis的实现原理"><a href="#redis的实现原理" class="headerlink" title="redis的实现原理"></a>redis的实现原理</h3><ol><li>内存存储：Redis 将数据存储在主内存中，以实现高速的读写操作。它使用自己的内存分配器，对内存进行高效管理，并通过哈希表等数据结构提供快速的数据访问。</li><li>单线程模型：Redis 采用单线程模型来处理客户端的请求。这是因为 Redis 的瓶颈通常在于 CPU 的处理能力，而不是线程的并发性。单线程模型简化了数据结构的实现和锁的管理，并减少了线程切换的开销。</li><li>基于事件驱动的异步 I&#x2F;O：Redis 使用事件驱动的网络模型来处理客户端请求和网络通信。它使用 epoll 或 kqueue 等操作系统提供的机制监听网络事件，一旦有事件发生，就会触发相应的回调函数进行处理。这种异步的 I&#x2F;O 模型使得 Redis 能够支持高并发的网络连接。</li><li>持久化机制：Redis 提供了两种持久化机制，即快照（snapshotting）和日志（append-only file）。快照通过将数据集的副本写入磁盘，以恢复数据集的状态。日志记录了写操作的命令，通过回放日志来还原数据集。这两种机制可以单独或同时使用，以满足不同的需求。</li><li>命令的原子性：Redis 的命令是原子性的，即每个命令要么完全执行，要么完全不执行。它使用事务和乐观锁机制来保证多个命令的原子性操作。事务通过将一组命令打包在一个单独的步骤中执行，而乐观锁则在执行命令之前检查数据是否被其他客户端修改。</li><li>高可用性和复制：Redis 支持主从复制机制，可以将一个 Redis 服务器配置为主服务器，而其他服务器作为从服务器进行复制。主服务器负责处理写操作，从服务器负责复制主服务器的数据并处理读操作。这样可以提高系统的可用性和容错性。</li></ol><h3 id="redis整合Springboot主要注解"><a href="#redis整合Springboot主要注解" class="headerlink" title="redis整合Springboot主要注解"></a>redis整合Springboot主要注解</h3><p><strong>@EnableCache</strong> 开启基于注解的缓存功能</p><p><strong>@Cacheable</strong>注解 ：<strong>先从redis数据库中 按照当前key查找，有没有。如果redis中有，是不会走当前该方法的，如果没有再调用方法返回结果，如果结果不为null将其缓存到数据库中（一般用于find）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;teacher&quot;,unless=&quot;#result ==null&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Teacher <span class="title function_">getById</span><span class="params">(Serialzable id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@CachePut:</strong> 主要用于向数据库中插入数据，向数据中插入数据的时候，会将返回的int类型，放入redis中缓存，当然是有选择性的(一般用于insert)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(cacheNames=&quot;teacher&quot;,key=&quot;#result.id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Teacher <span class="title function_">update</span><span class="params">(Teacher teacher)</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.updateById(teacher))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getById(teacher.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@CacheEvict</strong>：满足条件则移除当前key在redis中的数据（一般用于update&#x2F;delete）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;teacher&quot;,unless=&quot;#result ==null&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serialzable id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis实现和数据库的数据一致性"><a href="#Redis实现和数据库的数据一致性" class="headerlink" title="Redis实现和数据库的数据一致性"></a>Redis实现和数据库的数据一致性</h3><ol><li><strong>读写分离</strong>：通过将数据库的读操作和写操作分别路由到不同的实例或节点，可以实现读写分离。写操作可以直接写入数据库，而读操作则可以从Redis中获取数据，从而实现数据库与Redis之间的数据一致性。</li><li>延迟双写：在写入数据库之前，先将数据写入Redis。然后，通过异步方式将数据写入数据库，可以减少写入数据库的频率，提高系统的性能。虽然在写入数据库之前存在一定的延迟，但通过合理的设计和配置，可以确保数据的最终一致性。</li><li>事务和队列：Redis支持事务（Transaction）和消息队列（Message Queue），可以将数据库的写操作和Redis的写操作放入同一个事务中或者将写操作作为消息放入队列中。通过事务或队列的机制，可以确保数据库和Redis中的写操作要么同时成功，要么同时失败，从而实现数据的一致性。</li><li>缓存更新策略：当数据库中的数据发生变化时，需要及时更新Redis中的缓存数据。可以采用主动更新（Active Updating）或被动更新（Passive Updating）策略。主动更新是在数据库数据变化时主动触发更新Redis缓存，而被动更新是在Redis缓存被访问时检查数据是否过期，过期则重新从数据库加载。这些策略可以根据具体场景和需求进行选择和调整。</li><li>数据同步和复制：如果需要在多个Redis节点之间实现数据一致性，可以使用Redis的复制机制。通过将一个Redis节点配置为主节点，而其他节点配置为从节点，主节点负责处理写操作并将数据复制到从节点。这样可以确保主节点和从节点之间的数据一致性。</li></ol><h2 id="2-rabbitMQ"><a href="#2-rabbitMQ" class="headerlink" title="2.rabbitMQ"></a>2.rabbitMQ</h2><p>RabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue 高级消息队列协议 ）的开源实现，能够实现异步消息处理       </p><p>rabbitMQ是一个消息代理：它接受和转发消息。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>异步处理</li><li>应用解耦</li><li>流量削峰</li><li>分布式事务管理</li></ol><h3 id="网页客户端端口号：15672"><a href="#网页客户端端口号：15672" class="headerlink" title="网页客户端端口号：15672"></a>网页客户端端口号：15672</h3><h3 id="配置端口号：5672"><a href="#配置端口号：5672" class="headerlink" title="配置端口号：5672"></a>配置端口号：5672</h3><h3 id="rabbitMQ的几个概念"><a href="#rabbitMQ的几个概念" class="headerlink" title="rabbitMQ的几个概念"></a>rabbitMQ的几个概念</h3><ol><li>交换器（Exchanges）：交换器是消息的发布者发送消息的地方。它接收来自生产者的消息并将其路由到一个或多个队列。交换器根据定义的规则（路由键）决定消息将被发送到哪个队列。<ul><li><code>fanout</code>类型的交换器会将消息广播到所有绑定到该交换器的队列中。它不关心消息的路由键（routing key），只是简单地将消息发送到所有绑定的队列。</li><li><code>header</code>类型的交换器使用消息的header信息进行匹配，根据header的键值对来确定消息路由到哪些队列。</li><li><code>topic</code>类型的交换器使用模式匹配的方式将消息路由到队列。消息的路由键（routing key）和交换器的绑定键（binding key）之间使用通配符进行匹配。</li><li><code>direct</code>类型的交换器根据消息的路由键（routing key）和交换器的绑定键（binding key）进行精确匹配，将消息路由到指定的队列。</li></ul></li><li>队列（Queues）：队列是RabbitMQ中的消息容器，它存储等待被消费者处理的消息。当消息被发送到队列时，它们会被保存在队列中直到被消费者接收。消费者可以按照顺序接收队列中的消息。</li><li>消息确认（Message Acknowledgment）：消息确认是一种机制，用于确认消息已被消费者接收和处理。当消息被消费者处理后，它可以发送一个确认给RabbitMQ，告知它可以删除该消息。</li></ol><h3 id="rabbitMQ的工作模式"><a href="#rabbitMQ的工作模式" class="headerlink" title="rabbitMQ的工作模式"></a>rabbitMQ的工作模式</h3><ol><li>简单模式（Simple Mode）：在简单模式下，一个生产者向一个队列发送消息，一个消费者从该队列接收并处理消息。这是最基本的模式，适用于单个生产者和单个消费者的情况。</li><li>工作队列模式（Work Queue Mode）：在工作队列模式下，一个生产者向一个队列发送消息，多个消费者从同一个队列接收消息并进行处理。消息会被平均分配给不同的消费者，以实现负载均衡。适用于并行处理任务的场景。</li><li>发布-订阅模式（Publish-Subscribe Mode）：在发布-订阅模式下，一个生产者发送消息到一个交换器，交换器将消息广播给绑定到它的所有队列。每个队列都有自己的消费者，它们独立地接收并处理消息。适用于需要将消息广播给多个消费者的场景。</li><li>路由模式（Routing Mode）：在路由模式下，生产者发送带有路由键的消息到交换器，交换器根据路由键将消息发送到与之匹配的队列。每个队列都有自己的消费者，它们只接收与队列绑定的特定路由键匹配的消息。适用于根据不同的消息内容将消息分发给不同的消费者的场景。</li><li>主题模式（Topic Mode）：主题模式是路由模式的扩展，它允许使用通配符匹配路由键。生产者发送带有特定主题的消息到交换器，消费者可以使用通配符模式订阅特定的主题，只接收与订阅主题匹配的消息。适用于根据复杂的主题匹配规则进行灵活消息过滤和路由的场景。</li></ol><h3 id="常用的消息队列中间件"><a href="#常用的消息队列中间件" class="headerlink" title="常用的消息队列中间件"></a>常用的消息队列中间件</h3><p>RocketMQ-Erlang语言</p><p>RocketMQ-阿里 Java语言，设计时参考了Kafka，消息可靠性上比Kafka更好</p><p>ActiveMQ-Apache</p><p>Kafka</p><h1 id="八-任务管理"><a href="#八-任务管理" class="headerlink" title="八. 任务管理"></a>八. 任务管理</h1><h2 id="cron时间表达式"><a href="#cron时间表达式" class="headerlink" title="cron时间表达式"></a>cron时间表达式</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;Seconds&#125; &#123;Minutes&#125; &#123;Hours&#125; &#123;DayofMonth&#125; &#123;Month&#125; &#123;DayofWeek&#125; &#123;Year&#125;或</span><br><span class="line">&#123;Seconds&#125; &#123;Minutes&#125; &#123;Hours&#125; &#123;DayofMonth&#125; &#123;Month&#125; &#123;DayofWeek&#125;</span><br></pre></td></tr></table></figure><h1 id="九-Java-EE后端分层设计"><a href="#九-Java-EE后端分层设计" class="headerlink" title="九. Java EE后端分层设计"></a>九. Java EE后端分层设计</h1><h2 id="MVC设计模式流程"><a href="#MVC设计模式流程" class="headerlink" title="MVC设计模式流程"></a>MVC设计模式流程</h2><p><img src="/2023/06/20/javaEE%E6%80%BB%E7%BB%93/295ddcc75ad2c2f7f9bfea66992216dc.png" alt="img"></p><p>（1）用户发起HTTP请求；</p><p>（2）Web服务器接收到请求后，根据请求的url地址将请求转发到相应的servlet进行处理。注意：控制器是和用户交互的接口；</p><p>（3）Servlet获取用户请求的相关参数，并根据用户的请求调用模型层相应操作接口；</p><p>（4）模型层调用数据库查询接口，进行数据查询；</p><p>（5）数据库返回相关的查询结果；</p><p>（6）模型层对相应的查询结果进行处理，并返回给控制器；</p><p>（7）控制器将封装好的查询结果传递给视图页面；</p><p>（8）视图页面获取查询结果，并进行页面渲染输出。</p><h2 id="前后端分离模式特点，和传统后端渲染模式的区别"><a href="#前后端分离模式特点，和传统后端渲染模式的区别" class="headerlink" title="前后端分离模式特点，和传统后端渲染模式的区别"></a>前后端分离模式特点，和传统后端渲染模式的区别</h2><p>前后端分离模式和传统后端渲染模式是两种不同的架构方式，它们有以下特点和区别：</p><p>前后端分离模式的特点：</p><ol><li>前后端分离：前后端分离模式将前端和后端开发分离，前端负责用户界面和交互逻辑，后端负责数据处理和业务逻辑。</li><li>API通信：前后端通过API进行通信，前端通过调用后端提供的API来获取数据和执行业务逻辑。</li><li>前端框架：前后端分离模式通常使用前端框架（如React、Angular、Vue.js）来构建交互式用户界面。</li><li>前端渲染：前端负责将获取到的数据进行渲染和展示，可以通过AJAX或Fetch等技术从后端异步获取数据，并使用JavaScript在客户端进行渲染。</li></ol><p>传统后端渲染模式的特点：</p><ol><li>后端渲染：传统后端渲染模式是指后端负责渲染生成完整的HTML页面，并将页面直接发送给客户端浏览器进行展示。</li><li>页面刷新：在传统后端渲染模式下，当用户与页面交互或请求新的内容时，通常需要进行整个页面的刷新，后端重新渲染页面并返回给客户端。</li><li>多页面应用：传统后端渲染模式通常适用于多页面应用（Multi-Page Application，MPA），每个页面由后端负责生成和渲染。</li><li>服务器负担：由于后端需要处理页面的渲染和请求响应，服务器的负担较重。</li></ol><p>区别：</p><ol><li>前后端分离模式将前端和后端分开，前端负责渲染和交互逻辑，后端提供API和数据服务；传统后端渲染模式中后端负责渲染生成完整的HTML页面。</li><li>前后端分离模式通过API进行通信，实现异步数据交互，只更新部分页面内容；传统后端渲染模式需要进行整个页面的刷新，导致网络开销较大。</li><li>前后端分离模式使用前端框架构建交互式用户界面，页面渲染由前端处理；传统后端渲染模式页面渲染由后端负责。</li><li>前后端分离模式适用于单页面应用（Single-Page Application，SPA）和多页面应用（Multi-Page Application，MPA）；传统后端渲染模式主要适用于MPA。</li></ol><p>前后端分离模式具有更好的灵活性和可维护性，前后端开发团队可以独立进行工作，并且前端可以使用现代化的技术栈构建交互式的用户界面。传统后端渲染模式在某些情况下可能更适用，特别是对于较为传统的多页面应用。选择哪种模式取决于具体的项目需求和技术栈。</p><h2 id="Service、-Transactional"><a href="#Service、-Transactional" class="headerlink" title="@Service、@Transactional"></a>@Service、@Transactional</h2><p>@Service和@Transactional是Spring框架中的注解，用于在应用程序中提供特定的功能和行为。</p><ol><li><p>@Service注解：@Service注解标记一个类为服务层组件，表示该类用于处理业务逻辑。它通常与@Autowired注解一起使用，将服务类对象注入到其他组件中。@Service注解帮助组织代码，使得代码结构更加清晰，并且方便进行依赖注入和组件扫描。</p></li><li><p>@Transactional注解：@Transactional注解用于控制事务的行为，用于确保在方法执行期间的数据库操作要么完全成功，要么完全失败（回滚）。它可以在方法级别或类级别上使用。当一个方法或类被标记为@Transactional时，Spring会创建一个事务边界，并确保在方法执行期间的数据库操作遵循事务的ACID特性（原子性、一致性、隔离性和持久性）。</p></li></ol><p>@Transactional注解提供了以下功能：</p><ul><li>自动地创建和管理事务。</li><li>当方法执行时，会自动启动事务，并在方法结束时提交事务或回滚事务（根据方法的执行结果）。</li><li>可以设置事务的隔离级别、传播行为、只读属性等。</li></ul><p>使用@Transactional注解可以确保数据库操作的一致性和完整性，并简化了事务管理的代码。它在与持久层框架（如Spring Data JPA、Hibernate）一起使用时，可以自动处理数据库事务，减少手动事务管理的工作量。</p><h2 id="设计的基本概念DTO、VO的作用"><a href="#设计的基本概念DTO、VO的作用" class="headerlink" title="设计的基本概念DTO、VO的作用"></a>设计的基本概念DTO、VO的作用</h2><p>DTO（Data Transfer Object）和VO（Value Object）是常见的设计模式，用于在不同层之间传输数据和封装数据。</p><p>DTO（数据传输对象）：</p><ul><li>DTO用于在不同层（如应用层、业务层和表示层）之间传输数据，通常用于解耦和减少网络通信的数据量。</li><li>DTO对象通常是轻量级的，只包含数据的属性以及相应的getter和setter方法，不包含业务逻辑。</li><li>DTO对象可以根据业务需求来定义，用于将多个相关的数据字段封装在一个对象中，方便传输和处理。</li></ul><p>VO（值对象）：</p><ul><li>VO用于封装特定领域的数据，通常是从业务层中获取的数据，并用于表示层（如UI层）展示数据。</li><li>VO对象包含多个属性，代表一个完整的值，可以是单个值或一组相关值的组合。</li><li>VO对象通常是不可变的，即一旦创建就不能修改其内部状态。</li><li>VO对象可以根据业务需求来定义，用于封装和展示特定领域的数据，方便在表示层进行显示和操作。</li></ul><p>作用：</p><ol><li>解耦和数据传输：DTO和VO可以帮助解耦和不同层之间的数据传输，将数据从一个层传递到另一个层时，可以使用DTO或VO对象来封装数据，避免直接传递大量的数据对象或领域对象。</li><li>数据封装和展示：DTO和VO提供了一种封装数据的方式，可以将相关的数据字段组合成一个对象，方便传输和展示。VO对象还可以在表示层中用于展示数据，并提供一个统一的视图对象。</li><li>安全性和灵活性：DTO和VO对象可以根据业务需求定义，仅包含需要传输或展示的属性，可以控制数据的安全性和灵活性。</li><li>减少网络通信开销：通过使用DTO对象，可以减少网络通信的数据量，只传输必要的数据字段，提高系统性能和效率。</li></ol><p>总而言之，DTO和VO是在不同层之间传输和封装数据的对象，可以提高系统的灵活性、性能和安全性，同时帮助解耦不同层的依赖关系。</p><h1 id="十-SpringSecurity"><a href="#十-SpringSecurity" class="headerlink" title="十. SpringSecurity"></a>十. SpringSecurity</h1><p>在Spring Security中，默认的角色值必须带有”ROLE_”前缀。这是因为Spring Security在进行授权时，会自动在配置的角色前面添加”ROLE_”前缀来与用户的角色进行匹配。</p><h2 id="1-SpringSecurity-的两大功能"><a href="#1-SpringSecurity-的两大功能" class="headerlink" title="1.SpringSecurity 的两大功能"></a>1.SpringSecurity 的两大功能</h2><ol><li>认证（Authentication）：Spring Security提供了一系列的身份验证功能，用于验证用户的身份。这包括基于表单登录、基于HTTP基本认证、基于LDAP认证等多种认证方式。Spring Security可以处理用户的认证请求，验证其身份，并提供相应的机制来管理用户的凭证和身份信息。</li><li>授权（Authorization）：Spring Security提供了强大的授权功能，用于管理和控制用户对资源的访问权限。通过配置安全规则和访问控制策略，可以限制特定用户或角色对应用程序中受保护资源的访问。Spring Security支持基于角色的访问控制、基于表达式的访问控制、注解驱动的访问控制等多种授权方式。</li></ol><h2 id="2-认证和授权涉及到哪些数据"><a href="#2-认证和授权涉及到哪些数据" class="headerlink" title="2.认证和授权涉及到哪些数据"></a>2.认证和授权涉及到哪些数据</h2><p>认证和授权涉及到以下数据：</p><ol><li><p>用户凭证：认证涉及用户凭证的验证，包括用户名、密码、证书或其他身份验证凭证。这些凭证用于验证用户的身份。</p></li><li><p>用户身份信息：认证过程中需要访问和验证用户的身份信息，例如用户的角色、权限、个人信息等。</p></li><li><p>访问令牌（Access Token）：在一些身份验证流程中，认证成功后会生成访问令牌，该令牌用于后续的请求中进行身份验证和授权。访问令牌包含了用户的身份信息或其他相关信息，用于验证用户的权限和访问权限。</p></li><li><p>资源和操作：授权涉及到对资源（如网页、API端点、文件等）和操作（如读取、写入、删除等）的权限管理。授权规则确定了哪些用户或用户组有权访问特定的资源和执行特定的操作。</p></li><li><p>安全规则和配置：认证和授权涉及到安全规则和配置的定义。这些规则定义了身份验证的方式、授权策略、访问控制规则等。安全规则和配置用于指定如何验证用户身份和授予访问权限。</p></li></ol><p>以上数据在认证和授权的过程中起着重要的作用，帮助确保用户的身份验证和对资源的授权是正确且安全的。</p><h2 id="3-用户-角色-权限是什么关系？怎么设计数据表"><a href="#3-用户-角色-权限是什么关系？怎么设计数据表" class="headerlink" title="3.用户-角色-权限是什么关系？怎么设计数据表"></a>3.用户-角色-权限是什么关系？怎么设计数据表</h2><p>用户-角色-权限是一种常见的权限管理模型，用于管理用户与其对应的角色和权限之间的关系。</p><p>在这种模型中，用户（User）是系统中的具体用户实体，每个用户可以被分配一个或多个角色。角色（Role）表示一组权限的集合，可以用来定义用户所拥有的访问权限。权限（Permission）表示对系统中特定资源或操作的访问权限。</p><p>设计数据表来支持用户-角色-权限模型时，可以考虑以下几个表：</p><ol><li><p>用户表（User table）：包含用户的基本信息，如用户ID、用户名、密码等。</p></li><li><p>角色表（Role table）：包含角色的信息，如角色ID、角色名称等。</p></li><li><p>权限表（Permission table）：包含权限的信息，如权限ID、权限名称、资源路径等。</p></li><li><p>用户角色关联表（User-Role table）：用于建立用户与角色之间的多对多关系。可以包含用户ID和角色ID作为外键，表示用户所拥有的角色。</p></li><li><p>角色权限关联表（Role-Permission table）：用于建立角色与权限之间的多对多关系。可以包含角色ID和权限ID作为外键，表示角色所拥有的权限。</p></li></ol><p>这样的数据表设计模型可以使得用户、角色和权限之间的关系清晰，并支持灵活的权限管理。通过在用户表和角色表之间建立关联，可以将角色分配给用户。同时，通过在角色表和权限表之间建立关联，可以定义角色所拥有的权限。</p><p>在实际应用中，根据具体的需求，可能还需要考虑其他表和字段的设计，例如资源表、角色继承关系等。数据表的设计应根据具体的业务需求和系统设计进行调整，以满足系统的权限管理和安全需求。</p><h2 id="4-springsecurity-中，角色和权限有哪些区别"><a href="#4-springsecurity-中，角色和权限有哪些区别" class="headerlink" title="4.springsecurity 中，角色和权限有哪些区别"></a>4.springsecurity 中，角色和权限有哪些区别</h2><p>在Spring Security中，角色（Role）和权限（Permission）有以下区别：</p><ol><li><p>角色（Role）：角色代表一组权限的集合，用于对用户进行分类和授权。角色是对权限的逻辑分组，可以将具有相似权限需求的用户分配到相应的角色中。例如，一个系统可以定义角色为”ADMIN”（管理员）、”USER”（普通用户）等。</p></li><li><p>权限（Permission）：权限代表对系统中特定资源或操作的访问权限。权限是具体的授权单元，表示用户对特定资源或操作的访问权限。例如，一个系统可以定义权限为”READ_USER”（读取用户信息）、”WRITE_USER”（修改用户信息）等。</p></li></ol><p>区别总结：</p><ul><li>角色是对权限的逻辑分组，用于对用户进行分类和授权。</li><li>权限是具体的授权单元，表示用户对特定资源或操作的访问权限。</li><li>角色可以包含多个权限，一个用户可以分配多个角色。</li><li>权限是最小的授权单元，可以直接分配给用户或包含在角色中。</li></ul><p>在Spring Security中，可以使用角色和权限来进行访问控制和权限管理。角色通常在用户和权限之间建立逻辑关联，以简化权限的管理和授权过程。同时，可以使用基于角色或基于权限的访问控制策略来控制用户对资源的访问权限。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cursor取消自动更新及老版本</title>
      <link href="/2023/04/07/cursor%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%80%81%E7%89%88%E6%9C%AC/"/>
      <url>/2023/04/07/cursor%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%80%81%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>删除原先的cursor，下载老版本的安装包，完成安装后立马关闭。</p><p>打开cursor的安装文件夹下的resources的文件夹，找到app-update.yml并删除。</p><p>这时，cursor就不会自动更新，可以免费使用。</p><p>下面我给出0.1.1、0.1.3、0.1.6三个版本供读者选择</p><p><a href="https://pan.baidu.com/s/1dYTNLMInkb7ivnJl2wyTLQ?pwd=7u1j" title="点击获取安装包">cursor老版本</a> 提取码: 7u1j</p>]]></content>
      
      
      
        <tags>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化</title>
      <link href="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>进入<a href="https://hexo.io/themes/">Hexo官方主题网址</a>找到喜欢的主题，打开GitHub根据教程安装主题，或者把整个主题下载下来解压在<code>你的博客目录下的themes</code>文件夹下</p><p>下面以next主题为例子</p><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230402234951528.png" alt="next主题安装"></p><p>然后修改<code>_config.yml</code>配置文件</p><p><code> theme:next #这里为你下载的主题文件夹名字</code></p><p>然后执行重新渲染部署即可，后文简称三步部署，不再做赘述。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>当你在本地部署后，修改某篇文章或者配置，无需重新清除渲染部署，保存然后刷新本地界面就可看到效果。可节省时间。</p><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><p>安装 Hexo 和 NexT 后，你可能会发现 Hexo 使用的两个配置文件，它们都称为：<code>_config.yml</code></p><ol><li>第一个位于站点根目录下，其中包含 Hexo 的配置。</li><li>第二个在主题根目录下，由 NexT 提供并包含主题的配置。<code>themes/next/_config.yml或者node_modules/hexo-theme-next/_config.yml</code></li></ol><p>后文我们称第一个 为Hexo 配置文件，第二个为NexT 配置文件，不在赘述。</p><h3 id="备用主题配置"><a href="#备用主题配置" class="headerlink" title="备用主题配置"></a>备用主题配置</h3><p>关于如何配置NexT主题？传统方法是编辑 NexT 配置文件。但是，通过 git 或 npm 升级 NexT 主题时，配置文件会被覆盖，这给主题的配置带来了不便。具体可看<a href="https://theme-next.js.org/docs/getting-started/configuration.html">NexT文档</a>。</p><ol><li><p>请确保您使用的是 Hexo 5.0 或更高版本。</p></li><li><p>在站点的根目录中创建一个配置文件，例如 <code>_config.next.yml</code></p></li><li><p>将所需的 NexT 主题选项从 NexT 配置文件复制到此配置文件中。</p></li><li><p>在所有这些设置上方添加参数。<code>theme_config:next(你的主题文件夹名)</code></p><blockquote><p>NexT官方文档说的是，把所有配置代码后移，然后再上方加theme_config: 。我实操下来，这样是不行的。渲染后还是老的配置文件生效。所以改为我上面那样写。</p></blockquote></li></ol><h2 id="网站页面设置"><a href="#网站页面设置" class="headerlink" title="网站页面设置"></a>网站页面设置</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>在Hexo配置文件找到:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment">#网站名</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#简介</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#网站关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#时区</span></span><br></pre></td></tr></table></figure><p>具体language的值可查看主题下language文件夹，如zh-HK，zh-TW等。</p><blockquote><p>香港、台湾是我国不可分割的一部分。这里只是为了区分简体和繁体。</p></blockquote><h3 id="布局方案"><a href="#布局方案" class="headerlink" title="布局方案"></a>布局方案</h3><p>方案是NexT支持的一项功能，通过使用Scheme，NexT提供不同的视图。几乎所有的配置都可以被这些方案使用。到目前为止，NexT支持4种方案，它们是：</p><ul><li><code>Muse</code>→默认方案，这是NexT的初始版本。使用黑白色调，主要看起来干净。</li><li><code>Mist</code>→ Muse的紧凑版本，具有整洁的单列视图。</li><li><code>Pisces</code>→双列方案，像邻居的女儿一样新鲜。</li><li><code>Gemini</code>→ 看起来像双鱼座，但具有带有阴影的不同列块，以显示对视图更敏感。</li></ul><p>可以通过编辑 NexT 配置文件、搜索关键字来更改方案。将看到 4 行方案设置，可以通过删除其中一行并添加到上一个来启用其中一行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><h3 id="站点图标"><a href="#站点图标" class="headerlink" title="站点图标"></a>站点图标</h3><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230405144231330.png" alt="image-20230405144231330"></p><p>图标存储在<code>\themes\next\source\images</code>下,选择你想要的图标后,在next配置文件下替换即可,此处我为了方便管理新建了favicon文件夹专门存放站点图标,读者根据自行需求更改.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon/favicon-16x16-stars.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon/favicon-32x32-stars.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/favicon/apple-touch-icon-stars.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/favicon/logo.svg</span></span><br></pre></td></tr></table></figure><h3 id="背景图像设置"><a href="#背景图像设置" class="headerlink" title="背景图像设置"></a>背景图像设置</h3><p>在<code>themes\next\source\css</code>下创建文件夹<code>\_custom</code>然后在创建<code>style.styl</code></p><p>添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/background/planet1.png</span>);//背景图片路径</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片放入<code>themes\next\source\images\background</code>，然后在<code>themes\next\source\css\main.styl</code>添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_custom/style.styl&quot;</span></span><br></pre></td></tr></table></figure><p>三步操作部署渲染即可看到效果。</p><h3 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h3><h4 id="网站成立年份和作者"><a href="#网站成立年份和作者" class="headerlink" title="网站成立年份和作者"></a>网站成立年份和作者</h4><p>在next配置文件找到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span> <span class="comment">#年份 默认为当前年份，若填入年份小于当前年份，则显示为 2022-2023类似的格式</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-star</span> <span class="comment">#中间的图标，可以自行替换</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span> <span class="comment">#图标动画开关</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">rgb(77,</span> <span class="number">116</span><span class="string">,</span> <span class="number">250</span><span class="string">)</span> <span class="comment">#图标颜色</span></span><br></pre></td></tr></table></figure><h4 id="注释页脚logo"><a href="#注释页脚logo" class="headerlink" title="注释页脚logo"></a>注释页脚logo</h4><p>在next配置文件找到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span> <span class="comment">#值改为false</span></span><br></pre></td></tr></table></figure><h4 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h4><p>在<code>themes\next\layout\_partials\footer.njk</code>增加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;01/04/2023 00:00:00&quot;</span>);<span class="comment">//在此处修改你的建站时间</span></span></span><br><span class="line"><span class="language-javascript">        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>); </span></span><br><span class="line"><span class="language-javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days); </span></span><br><span class="line"><span class="language-javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours); </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="language-javascript">        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span></span><br><span class="line"><span class="language-javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span></span><br><span class="line"><span class="language-javascript">        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;在互联网已生存 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="访客量、网站浏览量和文章阅读数"><a href="#访客量、网站浏览量和文章阅读数" class="headerlink" title="访客量、网站浏览量和文章阅读数"></a>访客量、网站浏览量和文章阅读数</h4><p>在next配置文件打开busuanzi_count，_icon都为对应的图标，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span> <span class="comment">#统计访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span> </span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>  <span class="comment">#统计访问数</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span> <span class="comment">#统计文章阅读数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure><p>同时在这里简单介绍一下：</p><blockquote><p>pv方式，统计单个用户连续点击N篇文章，记录N次访问量。</p><p>uv方式，统计单个用户连续点击N篇文章，但只记录1次访问量。</p></blockquote><p>在<code>themes\next\layout\_partials\footer.njk</code>找到下面代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-count&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; __(&#x27;footer.total_visitors&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; __(&#x27;footer.total_views&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line">#可根据需要修改为你需要的样式。</span><br></pre></td></tr></table></figure><p>默认效果：</p><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230405212053567.png" alt="image-20230405212053567"></p><p>如果next的默认效果你很满意无需更改，可跳至下一步骤。</p><p>取消中间“|”，在 <code>themes\next\source\css\_common\components\post\post-header.styl</code>下找到下面代码，这是页脚的css样式。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .post-meta-item exists in .post-meta and footer</span></span><br><span class="line"><span class="selector-pseudo">:not</span>(.post-meta-break) + <span class="selector-class">.post-meta-item</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个样式多处共用，我们在他的下方写一段清除样式的css代码，然后在上方的页脚处复制class即可。<code>class=&quot;post-meta-item clear-post-meta-item&quot;</code>达到清除的效果，详见下文。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear-post-meta-item</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉图标，增加旋转等待特效<code>&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;</code>。当busuanzi_count数据未传送完成时，原先数字位置会出现旋转等待图标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-count&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item clear-post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;span class=&quot;post-meta-item-icon&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">      &lt;/span&gt;--&gt;</span></span><br><span class="line">      一共有<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; __(&#x27;footer.total_visitors&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span>个人类来跟我说过</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item clear-post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;span class=&quot;post-meta-item-icon&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">      &lt;/span&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; __(&#x27;footer.total_views&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span>次hello哦</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="首页和归档页面文章分页"><a href="#首页和归档页面文章分页" class="headerlink" title="首页和归档页面文章分页"></a>首页和归档页面文章分页</h3><p>安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">--save</span> hexo<span class="literal">-generator-index</span></span><br><span class="line">npm install <span class="literal">--save</span> hexo<span class="literal">-generator-archive</span></span><br></pre></td></tr></table></figure><p>在Hexo配置文件中修改下面代码，使得首页每间隔5篇文章就分页，归档页每间隔10篇文章才分页。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span> <span class="comment">#文章间隔多少篇分页</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"><span class="comment">#这段自己添加</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span> </span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="标题徽章logo"><a href="#标题徽章logo" class="headerlink" title="标题徽章logo"></a>标题徽章logo</h3><p>在next配置文件，放入你喜欢的图标即可，注意Mist布局不支持此项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_logo:</span> <span class="string">/uploads/custom-logo.jpg</span></span><br></pre></td></tr></table></figure><h3 id="深色模式"><a href="#深色模式" class="headerlink" title="深色模式"></a>深色模式</h3><p>在next配置文件打开,当用户操作系统为深色模式时网站会自动适配深色模式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><p>书签是一个插件，允许用户保存他们的阅读进度。用户只需单击页面左上角的书签图标（如🔖）即可保存滚动位置。当他们下次访问您的博客时，他们可以自动恢复每个页面的最后一个滚动位置。</p><p>您可以通过在 NexT 配置文件中将值设置为来启用它。<code>bookmark.enable``true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment">#如果是auto，关闭页面或点击书签图标时保存阅读进度。</span></span><br><span class="line">  <span class="comment">#如果是manual，只需单击书签图标保存即可。</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span> </span><br></pre></td></tr></table></figure><h2 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h2><p>在next配置文件中，找到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">/schedule/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-calendar</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">/404/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>分别对应</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure><p>可以把你不需要的功能注释掉，也可以在对应名字那些修改成你想要的名字。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>使用 Hexo 命令新建一个名为 <code>tags</code> 的页面即可，值得一提的是，next的标签是以词云那种形式的，某个标签的文章越多，该标签显示效果越大，蛮有趣的。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>该页面标题可以在文件 <code>\hexo\source\tags\index.md</code> 中修改</p><h4 id="为文章添加标签"><a href="#为文章添加标签" class="headerlink" title="为文章添加标签"></a>为文章添加标签</h4><p>在文章的开头添加如下字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签一</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签二</span></span><br></pre></td></tr></table></figure><p>然后在刚才生成的<code>博客目录\source\tags\index.md</code>指定其type为tags</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-04-03 17:36:06</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>执行三步部署就能看到标签效果。</p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>使用 Hexo 命令新建一个名为 <code>about</code> 的页面即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><blockquote><p>该页面内容在文件 <code>\hexo\source\about\index.md</code> 中修改</p></blockquote><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>通过在站点根目录目录中执行以下命令进行安装：<code>hexo-generator-searchdb</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span></span><br></pre></td></tr></table></figure><p>编辑 Hexo 配置文件并添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure><p>编辑 NexT 配置文件以启用本地搜索：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#打开本地搜索</span></span><br><span class="line">  <span class="comment">#auto:搜索框改变实时搜索，manual:按回车键或搜索按钮触发搜索</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> </span><br></pre></td></tr></table></figure><blockquote><p>还可以使用Algolia Search第三方搜索,具体可看<a href="https://theme-next.js.org/docs/third-party-services/search-services.html#Algolia-Search">官方文档</a></p></blockquote><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><p>官方文档写的非常详细:<a href="https://theme-next.js.org/docs/theme-settings/sidebar.html#Sidebar-TOC">NexT 侧边栏设置</a></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在next配置文件找到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment">#主题</span></span><br><span class="line">  <span class="attr">theme:</span> </span><br><span class="line">    <span class="attr">light:</span> <span class="string">a11y-dark</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">a11y-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment">#一键复制按钮</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="comment">#代码块风格</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span> <span class="comment">#default | flat | mac</span></span><br></pre></td></tr></table></figure><p>可以在此选择你想要的主题风格<a href="https://theme-next.js.org/highlight/">Highlight (theme-next.js.org)</a></p><p>另外在hexo配置文件，选择打开highlight还是prismjs</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="背景动画"><a href="#背景动画" class="headerlink" title="背景动画"></a>背景动画</h2><p>背景动画使用Js来处理，会JS的同学可以自己写喜欢的动画，我这边就用了网上比较通用的动画。找到以下路径 <code>themes\next\layout\_layout.njk</code> 在文章 <code>&lt;/body&gt;</code>的上面添加如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;255,255,255&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-2&quot;</span> <span class="attr">count</span>=<span class="string">&quot;100&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新部署后，网页出现粒子动画</p><h2 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h2><h3 id="标签图标"><a href="#标签图标" class="headerlink" title="标签图标"></a>标签图标</h3><p>默认情况下，帖子底部的标签左侧有一个符号 #。如果你更喜欢图标而不是符号，请编辑 NexT 配置文件，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="字数统计和阅读时间"><a href="#字数统计和阅读时间" class="headerlink" title="字数统计和阅读时间"></a>字数统计和阅读时间</h3><p>安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-word-counter</span></span><br></pre></td></tr></table></figure><p>在hexo配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment">#文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment">#文章阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment">#页脚全站字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment">#页脚全站阅读时间</span></span><br></pre></td></tr></table></figure><p>next配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> <span class="comment">#单独的行显示文章字数和估计阅读时间</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span> <span class="comment">#页脚部分中显示字数和估计阅读时间</span></span><br></pre></td></tr></table></figure><h2 id="球体滚动标签云"><a href="#球体滚动标签云" class="headerlink" title="球体滚动标签云"></a>球体滚动标签云</h2><p>可以访问<a href="https://helloworldeng.github.io/">我的博客</a>，打开侧边栏查看效果</p><p>首先安装插件<code>npm install hexo-tag-cloud</code>，在你想要添加标签云效果的页面加入以下代码，我添加在侧边栏，打开<code>themes\next\layout\_macro\sidebar.njk</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> site.<span class="property">tags</span>.<span class="property">length</span> &gt; <span class="number">1</span> %&#125;</span><br><span class="line">        &lt;script type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;margin: 0 auto;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 &#123;&#123; list_tags() &#125;&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在hexo配置文件加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span> <span class="comment">#字体</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span> </span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span> <span class="comment">#选中字体时背景颜色</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span> <span class="comment">#运行速度</span></span><br></pre></td></tr></table></figure><p>三步部署即可看到效果。</p><h2 id="提交博客到搜索引擎"><a href="#提交博客到搜索引擎" class="headerlink" title="提交博客到搜索引擎"></a>提交博客到搜索引擎</h2><h3 id="提交到百度"><a href="#提交到百度" class="headerlink" title="提交到百度"></a>提交到百度</h3><h4 id="博客验证"><a href="#博客验证" class="headerlink" title="博客验证"></a>博客验证</h4><p>访问<a href="https://link.zhihu.com/?target=https://ziyuan.baidu.com/">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择 <code>用户中心</code> –&gt; <code>站点管理</code> 输入你的网站，协议头推荐是https协议的，如果你没有https协议后面可能会出现报错，因为hexo会强制把你的链接转为https协议</p><p>选择文件验证，下载验证文件，放到blog的 <code>source</code> 目录中，如下设置hexo配置文件，防止这个html被 <code>hexo g</code> 命令重新渲染。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;你的百度验证html名&gt;.html</span></span><br></pre></td></tr></table></figure><p>然后 <code>hexo clean; hexo g; hexo d</code> ，完成验证。</p><h4 id="主动提交"><a href="#主动提交" class="headerlink" title="主动提交"></a>主动提交</h4><p>安装插件 <code>npm install hexo-baidu-url-submit --save</code>，设置hexo配置文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span>              <span class="comment"># 提交最新的多少个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">lantary.cn</span>       <span class="comment"># 在百度站长平台中添加的你的博客域名</span></span><br><span class="line">  <span class="attr">token:</span> [<span class="string">your_token</span>]    <span class="comment"># 秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span>   <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>token在 <code>普通收录</code> -&gt; <code>API提交</code> 中能看到</p><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230411230211726.png" alt="image-20230411230211726"></p><p>在hexo配置文件加入你的站点、加入新的deploy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://helloworldeng.github.io</span> <span class="comment"># 你的博客网站</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/HelloWorldENG/HelloWorldENG.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span>         <span class="comment"># 新加的推送</span></span><br></pre></td></tr></table></figure><p>最后运行 <code>hexo clean; hexo g; hexo d</code>，显示</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;remain&quot;</span>:<span class="number">2965</span>,<span class="string">&quot;success&quot;</span>:<span class="number">33</span>&#125;</span><br></pre></td></tr></table></figure><p>说明成功推送33个链接，remain是当天剩余可推送的条数</p><h4 id="sitemap提交"><a href="#sitemap提交" class="headerlink" title="sitemap提交"></a>sitemap提交</h4><p>推荐sitemap提交和主动提交一起部署，先安装一下插件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>然后使用命令 <code>hexo clean; hexo g; hexo d</code> 就在首页生成了sitemap.xml文件，其中，sitemap.xml是通用的站点地图，而baidusitemap.xml是百度专用的站点地图。</p><h3 id="提交到谷歌、必应"><a href="#提交到谷歌、必应" class="headerlink" title="提交到谷歌、必应"></a>提交到谷歌、必应</h3><p>谷歌和必应的步骤相同，这里就一起讲了。进入<a href="https://link.zhihu.com/?target=https://search.google.com/search-console?resource_id=https://lantary.github.io/">Google搜索管理后台</a>和<a href="https://link.zhihu.com/?target=https://www.bing.com/webmasters/home?siteUrl=https://lantary.github.io/&tid=be203ebf-3620-4699-a1fc-d1217bf2a6bc">bing搜索管理后台</a>。选择网站模式，输入博客域名，next集成了站长工具验证，接下来我们使用其的配置方法。</p><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230412210141541.png" alt="image-20230412210141541"></p><p>选择HTML验证，你将得到<code>&lt;meta name=&quot;google-site-verification&quot; content=&quot;xxxxxxxxxx&quot; /&gt;</code>，将xxxxxx填入next配置文件中，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span> <span class="string">xxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">xxxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure><p>百度验证也可使用这种办法，对应的填入 <code>baidu_site_verification:</code>即可</p><p>然后执行<code>hexo clean; hexo g; hexo d</code>在回到站长平台验证即可，验证后提交站点地图。用前文说到的，sitemap.xml文件。</p><p><img src="/2023/04/02/%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E6%90%AD%E5%BB%BA/image-20230412211657663.png" alt="image-20230412211657663"></p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>next集成了许多评论系统，这里我们选择畅言系统。进入<a href="https://changyan.kuaizhan.com/">畅言云评</a>，注册你的账号获得密匙。然后填入next配置文件，同时你也可在畅言后台设置一些你的个性化设置，如登录账号限制等等。需要注意：发表评论后，网站需要一些时间才能看到评论数量的增加。</p><p><img src="C:/Users/星星FacAi/AppData/Roaming/Typora/typora-user-images/image-20230413225912297.png" alt="image-20230413225912297"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">changyan:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">xxxxxxx</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">xxxxxx</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora书写Hexo博客及markDown语法</title>
      <link href="/2023/04/01/Typora%E4%B9%A6%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E5%8F%8AmarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/04/01/Typora%E4%B9%A6%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E5%8F%8AmarkDown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="开始写博客"><a href="#开始写博客" class="headerlink" title="开始写博客"></a>开始写博客</h2><p>hexo博客以md文件生成，使用markdown语法书写，在这里推荐Typora。</p><h3 id="Typora破解激活"><a href="#Typora破解激活" class="headerlink" title="Typora破解激活"></a>Typora破解激活</h3><p>在<a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a>下载Typora，然后在下载下面我给出的激活补丁。安装Typora后，关闭电脑安全中心实时防护，把补丁拉入Typora安装目录，再以管理员身份运行即可成功激活。</p><p><a href="https://pan.baidu.com/s/1yPO8Vx7UC5jsdqHI5pYVpg">激活补丁</a>  提取码: 3j6b </p><h3 id="标点符号问题"><a href="#标点符号问题" class="headerlink" title="标点符号问题"></a>标点符号问题</h3><p>当你在中文输入法却无法输出中文标点符号时，ctrl + . 即可改回中文输入状态输出中文符号</p><h3 id="Hexo初始化设置"><a href="#Hexo初始化设置" class="headerlink" title="Hexo初始化设置"></a>Hexo初始化设置</h3><h4 id="文章资源文件夹设置"><a href="#文章资源文件夹设置" class="headerlink" title="文章资源文件夹设置"></a>文章资源文件夹设置</h4><p>为了更规律化管理图片和其他资源以及想要将资源分布在各个文章上。</p><p>我们需要将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true        </span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h4 id="使用-Markdown-嵌入图片"><a href="#使用-Markdown-嵌入图片" class="headerlink" title="使用 Markdown 嵌入图片"></a>使用 Markdown 嵌入图片</h4><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片</p><p>如需启用，在<code>_config.yml</code>配置文件中加入如下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>启用后，资源图片将会被自动解析为其对应文章的路径。 例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> 。</p><h4 id="兼容Typora和Hexo图片显示"><a href="#兼容Typora和Hexo图片显示" class="headerlink" title="兼容Typora和Hexo图片显示"></a>兼容Typora和Hexo图片显示</h4><p>在上文中，<code>![](image.jpg)</code>可以在hexo正常显示图片，但在本地Typora无法显示图片，如果使用相对路劲，Typora能显示图片但Hexo又无法显示。我们修改下面配置达到两者兼容。</p><p><code>博客目录\node_modules\hexo-renderer-marked\lib\renderer.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image(href, title, text) &#123;</span><br><span class="line">    #加入如下代码</span><br><span class="line">    if(href.indexOf(&#x27;/&#x27;)&gt;-1)&#123;</span><br><span class="line">      href=href.split(&#x27;/&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在Typora下使用<code>![](文章目录/image.jpg)</code>就可以在本地Typora和Hexo部署都显示图片。</p><p><strong>4.02更新：</strong></p><p>如果使用上面那个方法，引入网络地址的图片时，地址渲染后就会失效。琢磨了一阵子，现在采用以下方法：</p><p>在Typora偏好设置 -&gt; 图像中这样修改，插入图片时自动复制到文章资源文件夹，</p><p><img src="/2023/04/01/Typora%E4%B9%A6%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E5%8F%8AmarkDown%E8%AF%AD%E6%B3%95/image-20230402195853264.png" alt="image-20230402195853264"></p><p>然后再设置图片根目录为文章资源文件夹</p><p><img src="/2023/04/01/Typora%E4%B9%A6%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E5%8F%8AmarkDown%E8%AF%AD%E6%B3%95/image-20230402200100738.png" alt="image-20230402200100738"></p><p>这时候文章前面会出现这样一条语句：</p><p><code>typora-root-url: ./博客文章同名文件夹</code></p><p>然后我们继续更改<code>博客目录\node_modules\hexo-renderer-marked\lib\renderer.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image(href, title, text) &#123;</span><br><span class="line">    //重定向Typora下本地图片路径，方便远程仓库渲染</span><br><span class="line">    if(href.startsWith(&#x27;/&#x27;))&#123;</span><br><span class="line">      href = href.slice(1);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现本地Typora和Hexo部署都显示图片。但每次写新的一篇博客都需要设置图片根目录略显繁琐。后续有更好的方法会继续更新。</p><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>我们在首页的时候其实就是我们的文章列表，但是这时候有个问题，如果我们某一篇或者某几篇文章很长，那首页是不是更长呢？其实在首页我们可以只显示文章部分内容，通过点击阅读更多按钮来进入文章详情。</p><p>目前主题可使用两种方式在首页显示文章摘要而不是全文。</p><h4 id="方法一-lt-more-gt"><a href="#方法一-lt-more-gt" class="headerlink" title="方法一: &lt;!-- more --&gt;"></a>方法一: <code>&lt;!-- more --&gt;</code></h4><p>在你觉得合适的地方加上<code>&lt;!-- more --&gt;</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015-12-03 00:00:00</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;Excerpt</span> <span class="string">in</span> <span class="string">index</span> <span class="string">|</span> <span class="string">首页摘要&gt;</span> </span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">more</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;The</span> <span class="string">rest</span> <span class="string">of</span> <span class="string">contents</span> <span class="string">|</span> <span class="string">余下全文&gt;</span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;!-- more --&gt;</code> 之前最好不要有空格等字符；</p></blockquote><h4 id="方法二-description"><a href="#方法二-description" class="headerlink" title="方法二: description"></a>方法二: <code>description</code></h4><p>在文章开头加上摘要</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015-12-03 00:00:00</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;Welcome to Hexo! This is your very first post.&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;Contents&gt;</span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>description</code> 添加的摘要只能为纯文本；</p></blockquote><blockquote><p><code>description</code> 中的内容加引号，可以避免一些程序错误，例如当内容里包含英文冒号时。</p></blockquote><h2 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。使用Markdown 编写的文档可以轻松地导出为 HTML、Word、图像、PDF、Epub 等多种格式的文档。当前许多网站都支持使用 Markdown 来撰写文档或者发表文章。例如：GitHub、简书、StackOverflow、有道云笔记等等。</p><p>注：很多语法格式需要空格分隔。不同语法直接支持相互嵌套。例如你可在引用里嵌套列表等等，具体可自行实验。</p><p>这里只给出日常语法，具体可查看<a href="https://markdown.com.cn/basic-syntax/htmls.html"> Markdown 官方教程</a>。在Typora 有许多快捷键快速生成语法。后续将直接给出快捷键，默认为Typora编辑器的快捷键不再赘述。</p><h3 id="标题语法-ctrl-对应数字"><a href="#标题语法-ctrl-对应数字" class="headerlink" title="标题语法 ctrl+对应数字"></a>标题语法 ctrl+对应数字</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 标题</span></span><br><span class="line"><span class="section">## 标题</span></span><br><span class="line"><span class="section">### 标题</span></span><br><span class="line"><span class="section">#### 标题</span></span><br><span class="line"><span class="section">##### 标题</span></span><br><span class="line"><span class="section">###### 标题</span></span><br></pre></td></tr></table></figure><h3 id="引用语法-ctrl-shift-q"><a href="#引用语法-ctrl-shift-q" class="headerlink" title="引用语法 ctrl+shift+q"></a>引用语法 ctrl+shift+q</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 你要引用的句子</span></span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>你要引用的句子</p></blockquote><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><h4 id="有序列表-ctrl-shift"><a href="#有序列表-ctrl-shift" class="headerlink" title="有序列表 ctrl+shift+["></a>有序列表 ctrl+shift+[</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表一</span><br><span class="line"><span class="bullet">2.</span> 列表二</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>列表一</li><li>safas二</li></ol><h4 id="无序列表-ctrl-shift"><a href="#无序列表-ctrl-shift" class="headerlink" title="无序列表 ctrl+shift+]"></a>无序列表 ctrl+shift+]</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表一</span><br><span class="line"><span class="bullet">*</span> 列表二</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>列表一</li></ul><ul><li>列表二</li></ul><h4 id="任务列表-ctrl-shift-x"><a href="#任务列表-ctrl-shift-x" class="headerlink" title="任务列表 ctrl+shift+x"></a>任务列表 ctrl+shift+x</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 列表一</span><br><span class="line"><span class="bullet">-</span> [x] 列表二</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><input disabled="" type="checkbox"> 列表一</li><li><input checked="" disabled="" type="checkbox"> 列表二</li></ul><h3 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h3><h4 id="代码-ctrl-shift-96"><a href="#代码-ctrl-shift-96" class="headerlink" title="代码 ctrl+shift+&#96;"></a>代码 ctrl+shift+&#96;</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`代码内容`</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><code>代码内容</code></p><h4 id="代码块-ctrl-shift-k"><a href="#代码块-ctrl-shift-k" class="headerlink" title="代码块 ctrl+shift+k"></a>代码块 ctrl+shift+k</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```你要的代码语言</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line">例如：</span><br><span class="line"><span class="code">```c</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### 表格语法 ctrl+t</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">|标题|标题|标题|</span><br><span class="line">|:--|:--:|--:|</span><br><span class="line">|内容|内容|内容|</span><br></pre></td></tr></table></figure><p>:在右边右对齐，在左边左对齐，两边都有冒号居中对齐</p><p>效果：</p><table><thead><tr><th align="left">标题</th><th align="center">标题</th><th align="right">标题</th></tr></thead><tbody><tr><td align="left">内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h3 id="脚注语法"><a href="#脚注语法" class="headerlink" title="脚注语法"></a>脚注语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内容[^脚注]</span><br><span class="line">[<span class="symbol">^脚注 </span>]:<span class="link">这是脚注</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>内容<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8">^脚注</a></p><h3 id="横线语法"><a href="#横线语法" class="headerlink" title="横线语法"></a>横线语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>效果：</p><hr><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><h4 id="超链接-ctrl-k"><a href="#超链接-ctrl-k" class="headerlink" title="超链接 ctrl+k"></a>超链接 ctrl+k</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名字</span>](<span class="link">网站 &quot;鼠标提示内容&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="%E7%BD%91%E7%AB%99" title="鼠标提示内容">链接名字</a></p><h4 id="封装链接在文章各处使用"><a href="#封装链接在文章各处使用" class="headerlink" title="封装链接在文章各处使用"></a>封装链接在文章各处使用</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名字</span>][<span class="symbol">id</span>],[<span class="string">链接名字</span>][<span class="symbol">id</span>],[<span class="string">链接名字</span>][<span class="symbol">id</span>]</span><br><span class="line">[<span class="symbol">id</span>]:<span class="link">网站 &quot;鼠标提示内容&quot;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="%E7%BD%91%E7%AB%99" title="鼠标提示内容">链接名字</a>,<a href="%E7%BD%91%E7%AB%99" title="鼠标提示内容">链接名字</a>,<a href="%E7%BD%91%E7%AB%99" title="鼠标提示内容">链接名字</a></p><h4 id="文章内部跳转"><a href="#文章内部跳转" class="headerlink" title="文章内部跳转"></a>文章内部跳转</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里以跳转到 Typora破解激活 举例</span><br><span class="line">[<span class="string">Typora破解激活</span>](<span class="link">#Typora破解激活</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="#Typora%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB">Typora破解激活 </a> </p><h3 id="图片语法-ctrl-shift-i"><a href="#图片语法-ctrl-shift-i" class="headerlink" title="图片语法 ctrl+shift+i"></a>图片语法 ctrl+shift+i</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名字</span>](<span class="link">地址 &quot;鼠标提示内容&quot;</span>)</span><br><span class="line">这里地址可用本地地址也可用在线地址，以下用百度logo举例</span><br><span class="line">![<span class="string">百度</span>](<span class="link">https://www.baidu.com/img/bd_logo1.png?where=super &quot;百度logo&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://www.baidu.com/img/bd_logo1.png?where=super" alt="百度" title="百度logo"></p><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><h4 id="斜体-ctrl-i"><a href="#斜体-ctrl-i" class="headerlink" title="斜体 ctrl+i"></a><em>斜体 ctrl+i</em></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br></pre></td></tr></table></figure><h4 id="加粗-ctrl-b"><a href="#加粗-ctrl-b" class="headerlink" title="加粗 ctrl+b"></a><strong>加粗 ctrl+b</strong></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br></pre></td></tr></table></figure><h4 id="下划线-ctrl-u"><a href="#下划线-ctrl-u" class="headerlink" title="下划线 ctrl+u"></a><u>下划线 ctrl+u</u></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="x3D-x3D-高亮-x3D-x3D"><a href="#x3D-x3D-高亮-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;高亮&#x3D;&#x3D;"></a>&#x3D;&#x3D;高亮&#x3D;&#x3D;</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure><h4 id="下标下标"><a href="#下标下标" class="headerlink" title="下标下标"></a>下标<del>下标</del></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下标~下标~</span><br></pre></td></tr></table></figure><h4 id="上标-上标"><a href="#上标-上标" class="headerlink" title="上标^上标^"></a>上标^上标^</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上标^上标^</span><br></pre></td></tr></table></figure><p>值得注意的是，高亮下标上标在Typora是默认关闭的。</p><p>打开方式：文件 &gt; 偏好设置 &gt; Markdown &gt; Markdown扩展语法中把他们选中 &gt; <strong>重启Typora</strong></p><h3 id="Html语法"><a href="#Html语法" class="headerlink" title="Html语法"></a>Html语法</h3><p>在markdown编辑器中，你可以通过html代码实现你所需要的功能，比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=419109055&amp;bvid=BV1fV411W7Ss&amp;cid=366830665&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span> <span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=419109055&bvid=BV1fV411W7Ss&cid=366830665&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" autoplay="false" > </iframe><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>markdown还有许多语法，例如数学公式等，这里没有论述感兴趣的可自行百度。</p><p><em>实验是检验真理的唯一标准。</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="/2023/04/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/04/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>该文将步步讲解从零搭建个人博客。此外本文聚焦于易上手快速搭建博客，主要涉及实操，关于理论，背后原理等请自行查看各官方文档。</p><p>当读者成功搭建博客后，无需花费很多的精力美化修饰博客，当然美化也无可厚非。我只是想说，比起关注博客的形式，更需关注自身内容的输出。<code>黑猫白猫能抓到老鼠的就是好猫</code></p><h2 id="使用的工具及系统环境"><a href="#使用的工具及系统环境" class="headerlink" title="使用的工具及系统环境"></a>使用的工具及系统环境</h2><p>个人博客框架是hexo，博客文件拖管于github。</p><p>我个人的系统环境是window11，本文教程都基于此。</p><blockquote><p>其他macOS和Linux也大同小异 触类旁通。 </p></blockquote><h2 id="Hexo博客框架"><a href="#Hexo博客框架" class="headerlink" title="Hexo博客框架"></a>Hexo博客框架</h2><p><a href="https://hexo.io/zh-cn/docs/" title="点击进入Hexo官方文档">Hexo</a>是一个快速、简洁且高效的博客框架。<a href="https://hexo.io/zh-cn/docs/" title="点击进入Hexo官方文档">Hexo</a> 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果你的电脑中已经安装上述必备程序，你可以直接前往 <a href="#%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2">生成博客</a> 步骤。</p><p>如果你的电脑中尚未安装所需要的程序，为避免重复造轮子，互联网上有很多详细的安装教程。请读者自行安装。同时提供<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>，这里也有Node和Git的安装教程。</p><p>最后打开cmd查看版本信息以确认环境配置信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node <span class="literal">-v</span> <span class="comment"># 查看node版本信息</span></span><br><span class="line">npm <span class="literal">-v</span> <span class="comment"># 查看npm版本信息</span></span><br><span class="line">git <span class="literal">-v</span> <span class="comment"># 查看git版本信息</span></span><br></pre></td></tr></table></figure><p>当你的设备成功安装以上程序，会输出版本信息。如果出现类似<code>“npm”不是内部的命令</code>等，请检查系统变量中<strong>path</strong>是否正常配置。</p><h3 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>有了<code>npm</code>包管理软件，安装<code>hexo</code>就很方便了，在cmd只需要一行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span> <span class="comment"># 全局安装hexo命令行工具</span></span><br></pre></td></tr></table></figure><p>其中<code>-g</code>参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>运行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="string">&quot;你的博客目录名称&quot;</span> <span class="comment"># 目录名称不含空格的时候双引号可以省略</span></span><br></pre></td></tr></table></figure><p>得到如下的反馈信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  Cloning hexo<span class="literal">-starter</span> https://github.com/hexojs/hexo<span class="literal">-starter</span>.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line"><span class="comment"># 一些可能的中间信息</span></span><br><span class="line">INFO  <span class="built_in">Start</span> blogging with Hexo!</span><br></pre></td></tr></table></figure><p>然后进入博客目录：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;博客目录&quot;</span></span><br></pre></td></tr></table></figure><p>安装博客需要的其他支持：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment"># 安装的依赖项在package.json文件的dependencies字段中可以看到 </span></span><br></pre></td></tr></table></figure><h4 id="博客项目目录结构介绍"><a href="#博客项目目录结构介绍" class="headerlink" title="博客项目目录结构介绍"></a>博客项目目录结构介绍</h4><p>进入博客目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package<span class="literal">-lock</span>.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>各部分的含义：</p><ul><li><p><code>_config.yml</code></p><p>为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：<a href="https://hexo.io/zh-cn/docs/configuration.html%E3%80%82">https://hexo.io/zh-cn/docs/configuration.html。</a></p></li><li><p><code>scaffolds</code></p><p>骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当<code>hexo</code>生成新博客的时候，会用这里面的模版进行初始化。</p></li><li><p><code>source</code></p><p>这个文件夹下面存放的是网站的<code>markdown</code>源文件，里面有一个<code>_post</code>文件夹，所有的<code>.md</code>博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个<code>hello-world.md</code>文件。</p></li><li><p><code>themes</code></p><p>网站主题目录，<code>hexo</code>有非常丰富的主题支持，主题目录会存放在这个目录下面。</p><p>我们后续会以默认主题来演示，更多的主题参见：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li></ul><h4 id="生成新文章"><a href="#生成新文章" class="headerlink" title="生成新文章"></a>生成新文章</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;test&quot; # 会在 source/_posts/ 目录下生成文件 ‘test.<span class="built_in">md</span>’，打开编辑</span><br><span class="line">hexo generate        # 生成静态HTML文件到 /public 文件夹中</span><br><span class="line">hexo server          # 本地运行server服务预览</span><br></pre></td></tr></table></figure><p>此时，访问<a href="http://localhost:4000/">http://localhost:4000</a> 即可预览你的博客：</p><p><img src="/2023/04/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo%E9%A2%84%E8%A7%88.png" alt="hexo预览"></p><h2 id="项目文件托管GitHub仓库"><a href="#项目文件托管GitHub仓库" class="headerlink" title="项目文件托管GitHub仓库"></a>项目文件托管GitHub仓库</h2><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p>进入<a href="https://github.com/new">github仓库创建</a>界面，新建repository。这里仓库名一定要<code>你的用户名/</code>比如你的用户名为丁真，那么就应该为 <code>丁真.github.io</code>。因为只有这样的仓库名称最后才能以静态页面展示。如图：XXX的内容一定要与红色的框里的文本一致。勾选Public。</p><p><img src="/2023/04/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA.jpg" alt="仓库搭建"></p><p>​仓库创建好之后 如图设置main&#x2F;root。</p><p><img src="/2023/04/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE.jpg" alt="仓库设置"></p><h3 id="部署到Git"><a href="#部署到Git" class="headerlink" title="部署到Git"></a>部署到Git</h3><p>此步骤可选择直接修改文件也可使用cmd修改，这里给出两种步骤方法。</p><h4 id="直接修改文件-config-yml-俩者选一"><a href="#直接修改文件-config-yml-俩者选一" class="headerlink" title="直接修改文件_config.yml(俩者选一)"></a>直接修改文件<code>_config.yml</code>(俩者选一)</h4><p>进入博客目录选择<code>_config.yml</code>，修改如下字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="string">repo:https://github.com/xxxx/xxx.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>type</code>值对应的是你所部署的的服务器类型，我们这里填写git就可以。</li><li><code>repo</code>是你的仓库地址，也就是仓库克隆的地址，推荐用https的链接。其中xxx为你的用户名，此地址直接从你仓库复制即可</li><li><code>branch</code>不写默认是master，通常我们写成main就可以。</li></ul><h4 id="cmd修改-俩者选一"><a href="#cmd修改-俩者选一" class="headerlink" title="cmd修改(俩者选一)"></a>cmd修改(俩者选一)</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;博客目录&quot;</span></span><br><span class="line">git initgit add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;my blog first commit&quot;</span></span><br><span class="line">git remote add origin <span class="string">&quot;远端github仓库地址&quot;</span></span><br><span class="line">git branch <span class="literal">-M</span> maingit push <span class="literal">-u</span> origin main</span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>以上配置完成后保存 然后回到终端执行<code>npm install hexo-deployer-git --save</code>安装一个插件，这样才能将你写好的文章部署到github服务器上并让别人浏览到。安装完成后在终端中依次执行如下代码(为了简单后续统称为三步)</p><ul><li><code>hexo clean</code>  清理缓存</li><li><code>hexo generate</code> 进行渲染 简写 <code>hexo g</code></li><li><code>hexo server</code> 部署到本地(调试使用) 简写 <code>hexo s</code>。然后浏览器输入 <code>http://localhost:4000</code> 就可以看到你博客的效果啦，不过这是本地调试用，其他人是看不到的。(调试完毕后记得 <code>control + C</code> 关闭本地端口，不然下次就进不去啦)</li><li>调试完毕后使用 <code>hexo deploy</code> 简写为 <code>hexo d</code>来部署到git服务器。</li></ul><p>如果出现</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config <span class="literal">--global</span> user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">  git config <span class="literal">--global</span> user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">&#x27;s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br></pre></td></tr></table></figure><p>这个错误是因为当前本地的Git还没配置用户信息, 所以执行以下命令:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"></span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line"><span class="comment">#在这一步时会跳出git和GitHub绑定界面 按提示操作即可</span></span><br><span class="line">hexo d <span class="comment">#重新部署</span></span><br></pre></td></tr></table></figure><p>出现<code>INFO  Deploy done: git</code>即部署成功 在浏览器访问<code>http://你github名字.github.io </code>进入博客</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><p>此步可看 <a href="#%E7%94%9F%E6%88%90%E6%96%B0%E6%96%87%E7%AB%A0">生成新文章</a>生成md文件，打开书写即可。推荐使用Typora书写。关于Typora和markDown语法后续会更新。</p><h2 id="后续升级"><a href="#后续升级" class="headerlink" title="后续升级"></a>后续升级</h2><p>后续博客网站可用netlify生成，国内访问采用cloudflare进行CDN加速。使用这个解决方案的原因是不需要云服务器，也不需要备案，只需要有一个域名即可。目前本人暂无域名需求，有需要的读者可自行查看相关教程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
